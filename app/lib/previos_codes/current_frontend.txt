lib/constants/contants.dart
export 'colors.dart';
export 'dimensions.dart';
export 'text_styles.dart';
export 'theme.dart';

lib/constants/colors.dart
import 'package:flutter/material.dart';

class AppColors {
  // Primary colors
  static const primary = Color(0xFF2196F3); // Main blue color
  static const primaryLight = Color(0xFF64B5F6); // Lighter blue
  static const primaryDark = Color(0xFF1976D2); // Darker blue

  // Secondary colors
  static const secondary = Color(0xFF1A4A44); // Dark teal
  static const secondaryLight = Color(0xFF26A69A); // Light teal

  // Success colors
  static const success = Color(0xFF4CAF50); // Green
  static const successLight = Color(0xFF81C784); // Light green

  // Error colors
  static const error = Color(0xFFEF5350); // Red
  static const errorLight = Color(0xFFE57373); // Light red

  // Warning colors
  static const warning = Color(0xFFFFA726); // Orange
  static const warningLight = Color(0xFFFFB74D); // Light orange

  // Info colors
  static const info = Color(0xFF29B6F6); // Light blue
  static const infoLight = Color(0xFF4FC3F7); // Lighter blue

  // Background colors
  static const background = Color(0xFFF5F5F5);
  static const surface = Color(0xFFFFFFFF);
  static const darkBackground = Color(0xFF121212);
  static const darkSurface = Color(0xFF1E1E1E);

  // Text colors
  static const textPrimary = Colors.black87;
  static const textSecondary = Color(0xFF757575);
  static const textLight = Colors.white;

  // Component colors
  static const divider = Color(0xFFBDBDBD);
  static const inputBorder = Color(0xFFBDBDBD);
  static const shadow = Color(0x1F000000); // Black with 12% opacity

  // Neutral colors
  static const grey = Color(0xFF9E9E9E);
  static const lightGrey = Color(0xFFF5F5F5);
  static const white = Colors.white;
  static const black = Colors.black;
  static const backgroundGrey = Color(0xFFF5F5F5);
}

lib/constants/dimensions.dart
class Dimensions {
  // Padding and margin
  static const double xs = 4.0;
  static const double sm = 8.0;
  static const double md = 16.0;
  static const double lg = 24.0;
  static const double xl = 32.0;

  // Border radius
  static const double borderRadiusXs = 4.0;
  static const double borderRadiusSm = 8.0;
  static const double borderRadiusMd = 12.0;
  static const double borderRadiusLg = 16.0;
  static const double borderRadiusXl = 24.0;

  // Icon sizes
  static const double iconSm = 16.0;
  static const double iconMd = 24.0;
  static const double iconLg = 32.0;

  // Font sizes
  static const double fontXs = 12.0;
  static const double fontSm = 14.0;
  static const double fontMd = 16.0;
  static const double fontLg = 18.0;
  static const double fontXl = 20.0;
  static const double fontXxl = 24.0;

  // Component sizes
  static const double buttonHeight = 48.0;
  static const double inputHeight = 48.0;
  static const double appBarHeight = 56.0;
  static const double bottomNavHeight = 64.0;
  static const double cardElevation = 2.0;

  // Image sizes
  static const double avatarSm = 32.0;
  static const double avatarMd = 48.0;
  static const double avatarLg = 64.0;
  static const double thumbnailSize = 80.0;
}

lib/constants/text_styles.dart
import 'package:flutter/material.dart';
import 'colors.dart';
import 'dimensions.dart';

class TextStyles {
  // Headings
  static const TextStyle h1 = TextStyle(
    fontSize: 24.0,
    fontWeight: FontWeight.bold,
    color: AppColors.textPrimary,
    height: 1.2,
  );

  static const TextStyle h2 = TextStyle(
    fontSize: 20.0,
    fontWeight: FontWeight.bold,
    color: AppColors.textPrimary,
    height: 1.2,
  );

  static const TextStyle h3 = TextStyle(
    fontSize: 18.0,
    fontWeight: FontWeight.bold,
    color: AppColors.textPrimary,
    height: 1.2,
  );

  // Body text
  static const TextStyle bodyLarge = TextStyle(
    fontSize: Dimensions.fontLg,
    color: AppColors.textPrimary,
    height: 1.5,
  );

  static const TextStyle bodyMedium = TextStyle(
    fontSize: Dimensions.fontMd,
    color: AppColors.textPrimary,
    height: 1.5,
  );

  static const TextStyle bodySmall = TextStyle(
    fontSize: Dimensions.fontSm,
    color: AppColors.textSecondary,
    height: 1.5,
  );

  // Button text
  static const TextStyle button = TextStyle(
    fontSize: Dimensions.fontMd,
    fontWeight: FontWeight.w600,
    letterSpacing: 0.5,
  );

  static const TextStyle buttonText = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.bold,
    letterSpacing: 0.5,
    height: 1,
  );

  // Input text
  static const TextStyle input = TextStyle(
    fontSize: Dimensions.fontMd,
    color: AppColors.textPrimary,
  );

  static const TextStyle inputLabel = TextStyle(
    fontSize: Dimensions.fontSm,
    color: AppColors.textSecondary,
    fontWeight: FontWeight.w500,
  );

  // Link text
  static const TextStyle link = TextStyle(
    fontSize: Dimensions.fontMd,
    color: AppColors.primary,
    fontWeight: FontWeight.w500,
  );

  // Error text
  static const TextStyle error = TextStyle(
    fontSize: Dimensions.fontSm,
    color: AppColors.error,
    height: 1.5,
  );

  // Caption text
  static const TextStyle caption = TextStyle(
    fontSize: Dimensions.fontXs,
    color: AppColors.textSecondary,
    height: 1.5,
  );
}

lib/constants/theme.dart
import 'package:flutter/material.dart';
import 'colors.dart';
import 'text_styles.dart';
import 'dimensions.dart';

class AppTheme {
  static ThemeData get lightTheme {
    return ThemeData(
      useMaterial3: true,
      primaryColor: AppColors.primary,
      scaffoldBackgroundColor: AppColors.background,
      colorScheme: ColorScheme.light(
        primary: AppColors.primary,
        secondary: AppColors.secondary,
        error: AppColors.error,
        background: AppColors.background,
        surface: AppColors.surface,
        onPrimary: AppColors.white,
        onSecondary: AppColors.white,
        onBackground: AppColors.textPrimary,
        onSurface: AppColors.textPrimary,
        onError: AppColors.white,
      ),

      // Text Theme
      textTheme: TextTheme(
        displayLarge: TextStyles.h1,
        displayMedium: TextStyles.h2,
        displaySmall: TextStyles.h3,
        bodyLarge: TextStyles.bodyLarge,
        bodyMedium: TextStyles.bodyMedium,
        bodySmall: TextStyles.bodySmall,
        labelLarge: TextStyles.buttonText,
      ),

      // AppBar Theme
      appBarTheme: AppBarTheme(
        backgroundColor: AppColors.primary,
        foregroundColor: AppColors.white,
        elevation: 0,
        centerTitle: true,
        titleTextStyle: TextStyles.h2.copyWith(color: AppColors.white),
      ),

      // Button Themes
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.primary,
          foregroundColor: AppColors.white,
          minimumSize: const Size(double.infinity, 48),
          padding: const EdgeInsets.symmetric(
            horizontal: Dimensions.md,
            vertical: Dimensions.sm,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
          ),
          textStyle: TextStyles.buttonText,
        ),
      ),

      // Text Button Theme
      textButtonTheme: TextButtonThemeData(
        style: TextButton.styleFrom(
          foregroundColor: AppColors.primary,
          textStyle: TextStyles.buttonText,
          padding: const EdgeInsets.symmetric(
            horizontal: Dimensions.md,
            vertical: Dimensions.sm,
          ),
        ),
      ),

      // Input Decoration Theme
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: AppColors.surface,
        contentPadding: const EdgeInsets.all(Dimensions.md),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
          borderSide: BorderSide(color: AppColors.grey),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
          borderSide: BorderSide(color: AppColors.grey),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
          borderSide: BorderSide(color: AppColors.primary),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
          borderSide: BorderSide(color: AppColors.error),
        ),
        labelStyle: TextStyles.bodyMedium,
        hintStyle: TextStyles.bodyMedium.copyWith(color: AppColors.grey),
      ),

      // Card Theme
      cardTheme: CardTheme(
        color: AppColors.surface,
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        ),
        margin: const EdgeInsets.all(Dimensions.sm),
      ),

      // Dialog Theme
      dialogTheme: DialogTheme(
        backgroundColor: AppColors.surface,
        elevation: 4,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        ),
      ),

      // Snackbar Theme
      snackBarTheme: SnackBarThemeData(
        backgroundColor: AppColors.surface,
        contentTextStyle: TextStyles.bodyMedium,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusSm),
        ),
      ),

      // Progress Indicator Theme
      progressIndicatorTheme: ProgressIndicatorThemeData(
        color: AppColors.primary,
        linearTrackColor: AppColors.grey.withOpacity(0.2),
      ),
    );
  }

  static ThemeData get darkTheme {
    return ThemeData(
      useMaterial3: true,
      primaryColor: AppColors.primary,
      scaffoldBackgroundColor: AppColors.darkBackground,
      colorScheme: ColorScheme.dark(
        primary: AppColors.primary,
        secondary: AppColors.secondary,
        error: AppColors.error,
        background: AppColors.darkBackground,
        surface: AppColors.darkSurface,
        onPrimary: AppColors.white,
        onSecondary: AppColors.white,
        onBackground: AppColors.white,
        onSurface: AppColors.white,
        onError: AppColors.white,
      ),

      // Text Theme (same as light but with white text)
      textTheme: TextTheme(
        displayLarge: TextStyles.h1.copyWith(color: AppColors.white),
        displayMedium: TextStyles.h2.copyWith(color: AppColors.white),
        displaySmall: TextStyles.h3.copyWith(color: AppColors.white),
        bodyLarge: TextStyles.bodyLarge.copyWith(color: AppColors.white),
        bodyMedium: TextStyles.bodyMedium.copyWith(color: AppColors.white),
        bodySmall: TextStyles.bodySmall.copyWith(color: AppColors.white),
        labelLarge: TextStyles.buttonText.copyWith(color: AppColors.white),
      ),

      // Other themes remain similar but with dark mode colors
      // You can customize further as needed
    );
  }
}

lib/data/models/course.dart
class Course {
  final int id;
  final String name;
  final String description;
  final String courseCode;
  final String createdByUsername;
  final List<String> students;
  final String imageUrl;
  final double progress;
  final int quizCount;
  final DateTime createdAt;
  final DateTime updatedAt;

  Course({
    required this.id,
    required this.name,
    required this.description,
    required this.courseCode,
    required this.createdByUsername,
    required this.students,
    required this.imageUrl,
    required this.progress,
    required this.quizCount,
    required this.createdAt,
    required this.updatedAt,
  });

  factory Course.fromJson(Map<String, dynamic> json) {
    return Course(
      id: json['id'] ?? 0,
      name: json['name'] ?? '',
      description: json['description'] ?? '',
      createdByUsername: json['created_by']?['username'] ?? '',
      courseCode: json['code'] ?? '',
      students: List<String>.from(json['students'] ?? []),
      imageUrl: json['image'] ?? '',
      progress: (json['progress'] as num?)?.toDouble() ?? 0.0,
      quizCount: json['quiz_count'] ?? 0,
      createdAt: json['created_at'] != null
          ? DateTime.parse(json['created_at'])
          : DateTime.now(),
      updatedAt: json['updated_at'] != null
          ? DateTime.parse(json['updated_at'])
          : DateTime.now(),
    );
  }

  factory Course.empty() {
    return Course(
      id: 0,
      name: '',
      description: '',
      courseCode: '',
      createdByUsername: '',
      students: [],
      imageUrl: '',
      progress: 0.0,
      quizCount: 0,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'code': courseCode,
      'created_by': {'username': createdByUsername},
      'students': students,
      'image': imageUrl,
      'progress': progress,
      'quiz_count': quizCount,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  Course copyWith({
    int? id,
    String? name,
    String? description,
    String? courseCode,
    String? createdByUsername,
    List<String>? students,
    String? imageUrl,
    double? progress,
    int? quizCount,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return Course(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      courseCode: courseCode ?? this.courseCode,
      createdByUsername: createdByUsername ?? this.createdByUsername,
      students: students ?? this.students,
      imageUrl: imageUrl ?? this.imageUrl,
      progress: progress ?? this.progress,
      quizCount: quizCount ?? this.quizCount,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }
}

lib/data/models/enrollment.dart
import 'course.dart';
import 'user.dart';

class EnrollmentRequest {
  final int id;
  final Course course;
  final User student;
  final String status;

  EnrollmentRequest({
    required this.id,
    required this.course,
    required this.student,
    required this.status,
  });

  factory EnrollmentRequest.fromJson(Map<String, dynamic> json) {
    return EnrollmentRequest(
      id: json['id'] ?? 0,
      course: Course.fromJson(json['course'] ?? {}),
      student: User.fromJson(json['student'] ?? {}),
      status: json['status'] ?? 'unknown',
    );
  }
}

class StudentEnrollmentRequest {
  final String courseName;
  final String courseDescription;
  final String courseImage;
  final String status;

  StudentEnrollmentRequest({
    required this.courseName,
    required this.courseDescription,
    required this.courseImage,
    required this.status,
  });

  factory StudentEnrollmentRequest.fromJson(Map<String, dynamic> json) {
    return StudentEnrollmentRequest(
      courseName: json['course_name'] ?? 'Unknown Course',
      courseDescription:
          json['course_description'] ?? 'No description available',
      courseImage: json['course_image'] ?? 'no_image.png',
      status: json['enrollment_status'] ?? 'unknown',
    );
  }
}

lib/data/models/module.dart
class Module {
  final int id;
  final String title;
  final String description;
  final int courseId;

  Module({
    required this.id,
    required this.title,
    required this.description,
    required this.courseId,
  });

  factory Module.fromJson(Map<String, dynamic> json) {
    try {
      return Module(
        id: json['id'] ?? 0,
        title: json['title'] ?? 'Untitled',
        description: json['description'] ?? 'No description',
        courseId: json['course_id'] ?? json['course'] ?? 0,
      );
    } catch (e) {
      print('Error parsing Module JSON: $e');
      print('JSON data: $json');
      rethrow;
    }
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'course_id': courseId,
    };
  }
}

lib/data/models/note.dart
class Note {
  final int id;
  final String title;
  final String content;
  final DateTime createdAt;
  final DateTime updatedAt;
  final int moduleId;
  final bool isSelected; // Added for selection functionality

  Note({
    required this.id,
    required this.title,
    required this.content,
    required this.createdAt,
    required this.updatedAt,
    required this.moduleId,
    this.isSelected = false,
  });

  String get formattedDate {
    return '${updatedAt.day}/${updatedAt.month}/${updatedAt.year}';
  }

  String get formattedCreatedDate {
    return '${createdAt.day}/${createdAt.month}/${createdAt.year}';
  }

  factory Note.fromJson(Map<String, dynamic> json) {
    return Note(
      id: json['id'] ?? 0,
      title: json['title'] ?? '',
      content: json['content'] ?? '',
      createdAt: DateTime.parse(
          json['created_at'] ?? DateTime.now().toIso8601String()),
      updatedAt: DateTime.parse(
          json['updated_at'] ?? DateTime.now().toIso8601String()),
      moduleId: json['module'] ?? 0,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'content': content,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
      'module': moduleId,
    };
  }

  Note copyWith({
    int? id,
    String? title,
    String? content,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? moduleId,
    bool? isSelected,
  }) {
    return Note(
      id: id ?? this.id,
      title: title ?? this.title,
      content: content ?? this.content,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      moduleId: moduleId ?? this.moduleId,
      isSelected: isSelected ?? this.isSelected,
    );
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Note &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          title == other.title &&
          content == other.content &&
          moduleId == other.moduleId;

  @override
  int get hashCode =>
      id.hashCode ^ title.hashCode ^ content.hashCode ^ moduleId.hashCode;
}

lib/data/models/parsed_questions.dart
class ParsedQuestion {
  final String text;
  final List<String> options;
  final String correctAnswer;

  ParsedQuestion({
    required this.text,
    required this.options,
    required this.correctAnswer,
  });

  ParsedQuestion copyWith({
    String? text,
    List<String>? options,
    String? correctAnswer,
  }) {
    return ParsedQuestion(
      text: text ?? this.text,
      options: options ?? this.options,
      correctAnswer: correctAnswer ?? this.correctAnswer,
    );
  }
}

lib/data/models/quiz.dart
class Quiz {
  final int id;
  final String title;
  final String description;
  final String content;
  final int moduleId;
  final int quizDuration;

  Quiz({
    required this.id,
    required this.title,
    required this.description,
    required this.content,
    required this.quizDuration,
    required this.moduleId,
  });

  factory Quiz.fromJson(Map<String, dynamic> json) {
    return Quiz(
      id: json['id'] ?? 0,
      title: json['title'] ?? 'Untitled',
      description: json['description'] ?? 'No description provided',
      content: json['content'] ?? 'No content provided',
      quizDuration: json['quiz_duration'] ?? 0,
      moduleId: json['module_id'] ?? 0,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'content': content,
      'quiz_duration': quizDuration,
      'module_id': moduleId,
    };
  }
}

lib/data/models/result.dart
class Result {
  final int id;
  final int quizId;
  final int studentId;
  final double percentage;
  final String quizContent;
  final String? aiRecommendations;
  final DateTime dateTaken;

  Result({
    required this.id,
    required this.quizId,
    required this.studentId,
    required this.percentage,
    required this.quizContent,
    this.aiRecommendations,
    required this.dateTaken,
  });

  factory Result.fromJson(Map<String, dynamic> json) {
    return Result(
      id: json['id'],
      quizId: json['quiz'],
      studentId: json['student'],
      percentage: json['percentage'].toDouble(),
      quizContent: json['quiz_content'],
      aiRecommendations: json['ai_recommendations'],
      dateTaken: DateTime.parse(json['date_taken']),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'quiz': quizId,
      'student': studentId,
      'percentage': percentage,
      'quiz_content': quizContent,
      'ai_recommendations': aiRecommendations,
      'date_taken': dateTaken.toIso8601String(),
    };
  }
}

lib/data/models/user.dart
class User {
  final String username;
  final int id;
  final String? imageUrl;
  final String? token;
  final String? refreshToken;
  final String role;
  final String email;
  final List<dynamic> enrolledCourses;
  final List<dynamic> createdCourses;

  User({
    required this.username,
    required this.id,
    this.imageUrl,
    this.token,
    this.refreshToken,
    required this.role,
    required this.email,
    this.enrolledCourses = const [],
    this.createdCourses = const [],
  });

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      username: json['user']['username'] ?? '',
      id: json['user']['id'] ?? 0,
      imageUrl: json['user']['image'],
      token: json['access'],
      refreshToken: json['refresh'],
      role: json['user']['role'] ?? 'student',
      email: json['user']['email'] ?? '',
      enrolledCourses: json['enrolled_courses'] ?? [],
      createdCourses: json['created_courses'] ?? [],
    );
  }

  bool isStudent() => role == 'student';
}

lib/data/repositories/auth_repository.dart
import '../models/user.dart';
import '../../services/auth_api_service.dart';
import '../../services/api_config.dart';

class AuthRepository {
  final AuthApiService _authService;

  AuthRepository(this._authService);

  Future<User> login(String username, String password) async {
    try {
      final response = await _authService.login(username, password);
      final user = User.fromJson(response);
      return user;
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  // Add register method
  Future<void> register({
    required String username,
    required String email,
    required String password,
    required String role,
    String? firstName,
    String? lastName,
  }) async {
    try {
      await _authService.register(
        username: username,
        email: email,
        password: password,
        role: role,
        firstName: firstName,
        lastName: lastName,
      );
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> logout() async {
    try {
      await _authService.logout();
      await ApiConfig.removeAuthToken();
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<User> refreshToken(String refreshToken) async {
    try {
      final response = await _authService.refreshToken(refreshToken);
      return User.fromJson(response);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  String _handleRepositoryError(dynamic error) {
    if (error is String) {
      switch (error.toLowerCase()) {
        case 'invalid credentials':
          return 'Incorrect username or password';
        case 'token expired':
          return 'Your session has expired. Please login again';
        case 'invalid token':
          return 'Authentication failed. Please login again';
        case 'network error occurred':
          return 'Please check your internet connection';
        case 'username already exists':
          return 'This username is already taken';
        case 'email already exists':
          return 'This email is already registered';
        case 'invalid email format':
          return 'Please enter a valid email address';
        case 'password too weak':
          return 'Password must be at least 8 characters long';
        default:
          return error;
      }
    }
    return error.toString();
  }
}

lib/data/repositories/course_repository.dart
import '../models/course.dart';
import '../../services/course_api_service.dart';

class CourseRepository {
  final CourseApiService _courseService;

  CourseRepository(this._courseService);

  Future<List<Course>> fetchCourses() async {
    try {
      final response = await _courseService.fetchCourses();
      return response.map((courseJson) => Course.fromJson(courseJson)).toList();
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<Course> getCourseDetail(int courseId) async {
    try {
      final response = await _courseService.getCourseDetail(courseId);
      return Course.fromJson(response);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<Course> createCourse(Course course) async {
    try {
      final response = await _courseService.createCourse(course.toJson());
      return Course.fromJson(response);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<Course> updateCourse(Course course) async {
    try {
      final response =
          await _courseService.updateCourse(course.id, course.toJson());
      return Course.fromJson(response);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> deleteCourse(int courseId) async {
    try {
      await _courseService.deleteCourse(courseId);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  String _handleRepositoryError(dynamic error) {
    if (error is String) {
      switch (error.toLowerCase()) {
        case 'course not found':
          return 'The requested course does not exist';
        case 'permission denied':
          return 'You do not have permission to perform this action';
        case 'network error occurred':
          return 'Please check your internet connection';
        case 'invalid course data':
          return 'Please check the course information and try again';
        case 'duplicate course code':
          return 'A course with this code already exists';
        case 'invalid course code':
          return 'Please enter a valid course code';
        default:
          return error;
      }
    }
    return error.toString();
  }
}


lib/data/repositories/enrollment_repository.dart
import '../models/enrollment.dart';
import '../../services/enrollment_api_service.dart';

class EnrollmentRepository {
  final EnrollmentApiService _enrollmentService;

  EnrollmentRepository(this._enrollmentService);

  Future<List<EnrollmentRequest>> fetchTeacherEnrollmentRequests() async {
    try {
      final response =
          await _enrollmentService.fetchTeacherEnrollmentRequests();
      return response
          .map((request) => EnrollmentRequest.fromJson(request))
          .toList();
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<List<StudentEnrollmentRequest>>
      fetchStudentEnrollmentRequests() async {
    try {
      final response =
          await _enrollmentService.fetchStudentEnrollmentRequests();
      return response
          .map((request) => StudentEnrollmentRequest.fromJson(request))
          .toList();
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> respondToEnrollment(int requestId, bool isApproved) async {
    try {
      await _enrollmentService.respondToEnrollment(requestId, isApproved);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  String _handleRepositoryError(dynamic error) {
    if (error is String) {
      switch (error.toLowerCase()) {
        case 'enrollment request not found':
          return 'The enrollment request no longer exists';
        case 'permission denied':
          return 'You do not have permission to manage enrollments';
        case 'network error occurred':
          return 'Please check your internet connection';
        case 'request already processed':
          return 'This enrollment request has already been processed';
        case 'course is full':
          return 'Cannot approve enrollment as the course is full';
        default:
          return error;
      }
    }
    return error.toString();
  }
}

lib/data/repositories/module_repository.dart
import '../models/module.dart';
import '../../services/module_api_service.dart';

class ModuleRepository {
  final ModuleApiService _moduleService;

  ModuleRepository(this._moduleService);

  Future<List<Module>> getModules(int courseId) async {
    try {
      final response = await _moduleService.fetchModules(courseId);
      return response.map((moduleJson) => Module.fromJson(moduleJson)).toList();
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> createModule(
      int courseId, String title, String description) async {
    try {
      await _moduleService.createModule(courseId, title, description);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> updateModule(
      int moduleId, String title, String description) async {
    try {
      await _moduleService.updateModule(moduleId, title, description);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> deleteModule(int moduleId) async {
    try {
      await _moduleService.deleteModule(moduleId);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  String _handleRepositoryError(dynamic error) {
    if (error is String) {
      switch (error.toLowerCase()) {
        case 'module not found':
          return 'The requested module does not exist';
        case 'permission denied':
          return 'You do not have permission to manage this module';
        case 'network error occurred':
          return 'Please check your internet connection';
        case 'course not found':
          return 'The course associated with this module does not exist';
        case 'invalid module data':
          return 'Please check the module information and try again';
        case 'module limit reached':
          return 'Maximum number of modules reached for this course';
        default:
          return error;
      }
    }
    return error.toString();
  }
}

lib/data/repositories/note_repository.dart
import '../models/note.dart';
import '../../services/note_api_service.dart';

class NoteRepository {
  final NoteApiService _noteService;

  NoteRepository(this._noteService);

  Future<List<Note>> getNotes(int moduleId) async {
    try {
      final response = await _noteService.fetchNotes(moduleId);
      return response.map((noteJson) => Note.fromJson(noteJson)).toList();
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<Note> getNote(int noteId) async {
    try {
      final response = await _noteService.getNote(noteId);
      return Note.fromJson(response);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> createNote(int moduleId, String title, String content) async {
    try {
      await _noteService.createNote(moduleId, title, content);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> updateNote(int noteId, String title, String content) async {
    try {
      await _noteService.updateNote(noteId, title, content);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> deleteNote(int noteId) async {
    try {
      await _noteService.deleteNote(noteId);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> generateQuizFromNotes(int moduleId, List<int> noteIds) async {
    try {
      await _noteService.generateQuizFromNotes(moduleId, noteIds);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  String _handleRepositoryError(dynamic error) {
    if (error is String) {
      switch (error.toLowerCase()) {
        case 'note not found':
          return 'The requested note does not exist';
        case 'permission denied':
          return 'You do not have permission to access this note';
        case 'network error occurred':
          return 'Please check your internet connection';
        case 'module not found':
          return 'The module associated with this note does not exist';
        case 'invalid note data':
          return 'Please check the note information and try again';
        case 'note limit reached':
          return 'Maximum number of notes reached for this module';
        case 'content too long':
          return 'Note content exceeds maximum length';
        case 'empty content':
          return 'Note content cannot be empty';
        case 'quiz generation failed':
          return 'Failed to generate quiz from selected notes';
        case 'insufficient notes':
          return 'Please select at least one note to generate quiz';
        default:
          return error;
      }
    }
    return error.toString();
  }
}

lib/data/repositories/quiz_repository.dart
import '../models/quiz.dart';
import '../../services/quiz_api_service.dart';

class QuizRepository {
  final QuizApiService _quizService;

  QuizRepository(this._quizService);

  Future<List<Quiz>> getQuizzes(int moduleId) async {
    try {
      final response = await _quizService.fetchQuizzes(moduleId);
      return response.map((quizJson) => Quiz.fromJson(quizJson)).toList();
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  // Add this method
  Future<Quiz> getQuizDetail(int quizId, int moduleId) async {
    try {
      final response = await _quizService.getQuizDetail(quizId, moduleId);
      return Quiz.fromJson(response);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> createQuiz({
    required int moduleId,
    required String title,
    required String description,
    required String content,
    required String quizDuration,
  }) async {
    try {
      await _quizService.createQuiz(
        moduleId: moduleId,
        title: title,
        description: description,
        content: content,
        quizDuration: quizDuration,
      );
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<void> submitQuizResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      await _quizService.submitQuizResult(
        moduleId: moduleId,
        quizId: quizId,
        percentage: percentage,
        quizContent: quizContent,
      );
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  String _handleRepositoryError(dynamic error) {
    if (error is String) {
      switch (error.toLowerCase()) {
        case 'quiz not found':
          return 'The requested quiz does not exist';
        case 'permission denied':
          return 'You do not have permission to access this quiz';
        case 'network error occurred':
          return 'Please check your internet connection';
        case 'quiz already submitted':
          return 'You have already submitted this quiz';
        default:
          return error;
      }
    }
    return error.toString();
  }
}

lib/data/repositories/result_repository.dart
import '../models/result.dart';
import '../../services/result_api_service.dart';

class ResultRepository {
  final ResultApiService _resultService;

  ResultRepository(this._resultService);

  Future<List<Result>> getResults(int moduleId, int quizId) async {
    try {
      final response = await _resultService.fetchResults(moduleId, quizId);
      return response.map((resultJson) => Result.fromJson(resultJson)).toList();
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<Result> submitResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      final response = await _resultService.submitResult(
        moduleId: moduleId,
        quizId: quizId,
        percentage: percentage,
        quizContent: quizContent,
      );
      return Result.fromJson(response);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  Future<Map<String, dynamic>> getLeaderboard(int moduleId, int quizId) async {
    try {
      return await _resultService.getLeaderboard(moduleId, quizId);
    } catch (e) {
      throw _handleRepositoryError(e);
    }
  }

  String _handleRepositoryError(dynamic error) {
    if (error is String) {
      switch (error.toLowerCase()) {
        case 'result not found':
          return 'The requested result does not exist';
        case 'permission denied':
          return 'You do not have permission to access this result';
        case 'network error occurred':
          return 'Please check your internet connection';
        case 'you have already submitted this quiz':
          return 'You have already submitted this quiz';
        case 'quiz not found':
          return 'The quiz associated with this result does not exist';
        default:
          return error;
      }
    }
    return error.toString();
  }
}

lib/providers/auth_provider.dart
import 'package:flutter/foundation.dart';
import '../data/models/user.dart';
import '../data/repositories/auth_repository.dart';
import '../services/api_config.dart';

class AuthProvider extends ChangeNotifier {
  final AuthRepository _repository;
  User? _user;
  bool _isLoading = false;
  String? _error;

  AuthProvider(this._repository);

  User? get user => _user;
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get isAuthenticated => _user != null;

  Future<void> login(String username, String password) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      _user = await _repository.login(username, password);
      // Store token in ApiConfig
      if (_user?.token != null) {
        await ApiConfig.setAuthToken(_user!.token!);
      }
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      notifyListeners();
      throw e;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> logout() async {
    try {
      await _repository.logout();
      // Clear token from ApiConfig
      await ApiConfig.removeAuthToken();
      _user = null;
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      notifyListeners();
      throw e;
    }
  }

  Future<void> checkAuthStatus() async {
    try {
      final hasToken = await ApiConfig.hasToken();
      if (hasToken) {
        await refreshToken();
      } else {
        _user = null;
        notifyListeners();
      }
    } catch (e) {
      await logout();
    }
  }

  Future<void> refreshToken() async {
    try {
      if (_user?.refreshToken != null) {
        final newUser = await _repository.refreshToken(_user!.refreshToken!);
        _user = newUser;
        if (_user?.token != null) {
          await ApiConfig.setAuthToken(_user!.token!);
        }
        notifyListeners();
      }
    } catch (e) {
      _error = e.toString();
      await logout();
      notifyListeners();
      throw e;
    }
  }

  // Add register method
  Future<void> register({
    required String username,
    required String email,
    required String password,
    required String role,
    String? firstName,
    String? lastName,
  }) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      await _repository.register(
        username: username,
        email: email,
        password: password,
        role: role,
        firstName: firstName,
        lastName: lastName,
      );

      // Automatically login after successful registration
      await login(username, password);
    } catch (e) {
      _error = e.toString();
      notifyListeners();
      throw e;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
}

lib/providers/course_provider.dart
import 'package:flutter/foundation.dart';
import '../data/models/course.dart';
import '../data/repositories/course_repository.dart';

class CourseProvider extends ChangeNotifier {
  final CourseRepository _repository;

  List<Course> _courses = [];
  Course _selectedCourse = Course.empty();
  bool _isLoading = false;
  String? _error;

  CourseProvider(this._repository);

  List<Course> get courses => _courses;
  Course get selectedCourse => _selectedCourse;
  bool get isLoading => _isLoading;
  String? get error => _error;

  int get totalQuizzes {
    return courses.fold(0, (sum, course) => sum + course.quizCount);
  }

  double get averageProgress {
    if (courses.isEmpty) return 0.0;
    return courses.fold(0.0, (sum, course) => sum + course.progress) /
        courses.length;
  }

  Future<void> fetchCourses() async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      _courses = await _repository.fetchCourses();
    } catch (e) {
      _error = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> getCourseDetail(int courseId) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      final course = await _repository.getCourseDetail(courseId);
      _selectedCourse = course;
    } catch (e) {
      _error = e.toString();
      _selectedCourse = Course.empty();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> createCourse(Course course) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      await _repository.createCourse(course);
      await fetchCourses();
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> updateCourse(Course course) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      await _repository.updateCourse(course);
      await fetchCourses();
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> deleteCourse(int courseId) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      await _repository.deleteCourse(courseId);
      await fetchCourses();
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  void clearError() {
    _error = null;
    notifyListeners();
  }
}

lib/providers/enrollment_provider.dart
import 'package:flutter/foundation.dart';
import '../data/models/enrollment.dart';
import '../data/repositories/enrollment_repository.dart';

class EnrollmentProvider extends ChangeNotifier {
  final EnrollmentRepository _repository;

  List<EnrollmentRequest> _teacherRequests = [];
  List<StudentEnrollmentRequest> _studentRequests = [];
  bool _isLoading = false;
  String? _error;

  EnrollmentProvider(this._repository);

  List<EnrollmentRequest> get teacherRequests => _teacherRequests;
  List<StudentEnrollmentRequest> get studentRequests => _studentRequests;
  bool get isLoading => _isLoading;
  String? get error => _error;

  Future<void> loadTeacherEnrollmentRequests() async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      _teacherRequests = await _repository.fetchTeacherEnrollmentRequests();
    } catch (e) {
      _error = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> loadStudentEnrollmentRequests() async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      _studentRequests = await _repository.fetchStudentEnrollmentRequests();
    } catch (e) {
      _error = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> respondToEnrollment(int requestId, bool isApproved) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      await _repository.respondToEnrollment(requestId, isApproved);
      await loadTeacherEnrollmentRequests(); // Refresh the list
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
}

lib/providers/module_provider.dart
import 'package:flutter/foundation.dart';
import '../services/module_api_service.dart';
import '../data/models/module.dart';

class ModuleProvider with ChangeNotifier {
  final ModuleApiService _moduleService;

  Module? _selectedModule;
  List<Module> _modules = [];
  bool _isLoading = false;
  String? _error;

  ModuleProvider(this._moduleService);

  // Getters
  Module? get selectedModule => _selectedModule;
  List<Module> get modules => _modules;
  bool get isLoading => _isLoading;
  String? get error => _error;

  Future<void> fetchModules(int courseId) async {
    _setLoading(true);
    try {
      final List<dynamic> data = await _moduleService.fetchModules(courseId);
      print('API Response: $data'); // Debug print

      if (data.isEmpty) {
        _modules = [];
        _error = null;
        return;
      }

      _modules = data
          .map((json) {
            try {
              if (json is! Map<String, dynamic>) {
                print('Invalid module data format: $json');
                return null;
              }
              return Module.fromJson(json);
            } catch (e) {
              print('Error parsing module: $e'); // Debug print
              print('Problematic JSON: $json'); // Add this line
              return null;
            }
          })
          .whereType<Module>()
          .toList();

      print('Parsed Modules: $_modules'); // Debug print
      _error = null;
    } catch (e) {
      print('Error fetching modules: $e'); // Debug print
      _error = e.toString();
      _modules = []; // Clear modules on error
    } finally {
      _setLoading(false);
    }
  }

  Future<void> fetchModuleDetails(int moduleId) async {
    _setLoading(true);
    try {
      final Map<String, dynamic> data =
          await _moduleService.fetchModuleDetails(moduleId);
      _selectedModule = Module.fromJson(data);
      _error = null;
    } catch (e) {
      _error = e.toString();
    } finally {
      _setLoading(false);
    }
  }

  void _setLoading(bool value) {
    _isLoading = value;
    notifyListeners();
  }
}

lib/providers/note_provider.dart
import 'package:flutter/foundation.dart';
import '../data/models/note.dart';
import '../data/repositories/note_repository.dart';

class NoteProvider extends ChangeNotifier {
  final NoteRepository _repository;

  List<Note> _notes = [];
  Note? _selectedNote;
  bool _isLoading = false;
  String? _error;
  bool _isSelectionMode = false;
  final Set<int> _selectedNoteIds = {};

  NoteProvider(this._repository);

  // Getters
  List<Note> get notes => _notes;
  Note? get selectedNote => _selectedNote;
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get isSelectionMode => _isSelectionMode;
  Set<int> get selectedNoteIds => _selectedNoteIds;
  bool get hasSelectedNotes => _selectedNoteIds.isNotEmpty;

  // Load notes
  Future<void> loadNotes(int moduleId) async {
    try {
      _setLoading(true);
      _notes = await _repository.getNotes(moduleId);
      _error = null;
    } catch (e) {
      _error = e.toString();
    } finally {
      _setLoading(false);
    }
  }

  // Create note
  Future<void> createNote(int moduleId, String title, String content) async {
    try {
      _setLoading(true);
      await _repository.createNote(moduleId, title, content);
      await loadNotes(moduleId);
      _error = null;
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _setLoading(false);
    }
  }

  // Update note
  Future<void> updateNote(
    int moduleId,
    int noteId,
    String title,
    String content,
  ) async {
    try {
      _setLoading(true);
      await _repository.updateNote(noteId, title, content);
      await loadNotes(moduleId);
      _error = null;
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _setLoading(false);
    }
  }

  // Delete note
  Future<void> deleteNote(int moduleId, int noteId) async {
    try {
      _setLoading(true);
      await _repository.deleteNote(noteId);
      await loadNotes(moduleId);
      _error = null;
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _setLoading(false);
    }
  }

  // Get single note
  Future<Note> getNote(int noteId) async {
    try {
      _setLoading(true);
      _selectedNote = await _repository.getNote(noteId);
      _error = null;
      return _selectedNote!;
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _setLoading(false);
    }
  }

  // Generate quiz from selected notes
  Future<void> generateQuiz(int moduleId, List<int> noteIds) async {
    if (noteIds.isEmpty) {
      throw Exception('Please select at least one note');
    }

    try {
      _setLoading(true);
      await _repository.generateQuizFromNotes(moduleId, noteIds);
      _error = null;
      clearSelection(); // Clear selection after successful quiz generation
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _setLoading(false);
    }
  }

  // Selection mode methods
  void toggleSelectionMode() {
    _isSelectionMode = !_isSelectionMode;
    if (!_isSelectionMode) {
      clearSelection();
    }
    notifyListeners();
  }

  void toggleNoteSelection(int noteId) {
    if (_selectedNoteIds.contains(noteId)) {
      _selectedNoteIds.remove(noteId);
    } else {
      _selectedNoteIds.add(noteId);
    }
    notifyListeners();
  }

  void clearSelection() {
    _selectedNoteIds.clear();
    notifyListeners();
  }

  // Helper method to set loading state
  void _setLoading(bool value) {
    _isLoading = value;
    notifyListeners();
  }

  // Clear state when disposing
  @override
  void dispose() {
    _notes = [];
    _selectedNote = null;
    _error = null;
    _selectedNoteIds.clear();
    super.dispose();
  }
}

lib/providers/quiz_provider.dart
import 'package:flutter/foundation.dart';
import '../data/models/quiz.dart';
import '../data/repositories/quiz_repository.dart';

class QuizProvider extends ChangeNotifier {
  final QuizRepository _repository;
  List<Quiz> _quizzes = [];
  Quiz? _selectedQuiz;
  bool _isLoading = false;
  String? _error;

  QuizProvider(this._repository);

  // Getters
  List<Quiz> get quizzes => _quizzes;
  Quiz? get selectedQuiz => _selectedQuiz;
  bool get isLoading => _isLoading;
  String? get error => _error;

  Future<void> fetchQuizzes(int moduleId) async {
    try {
      _setLoading(true);
      _quizzes = await _repository.getQuizzes(moduleId);
      _error = null;
    } catch (e) {
      _error = e.toString();
    } finally {
      _setLoading(false);
    }
  }

  Future<void> fetchQuizDetails(int moduleId, int quizId) async {
    try {
      _setLoading(true);
      _selectedQuiz = await _repository.getQuizDetail(moduleId, quizId);
      _error = null;
    } catch (e) {
      _error = e.toString();
    } finally {
      _setLoading(false);
    }
  }

  Future<void> createQuiz({
    required int moduleId,
    required String title,
    required String description,
    required String content,
    required String quizDuration,
  }) async {
    try {
      _setLoading(true);
      await _repository.createQuiz(
        moduleId: moduleId,
        title: title,
        description: description,
        content: content,
        quizDuration: quizDuration,
      );
      await fetchQuizzes(moduleId);
      _error = null;
    } catch (e) {
      _error = e.toString();
      rethrow; // Changed from throw e to rethrow
    } finally {
      _setLoading(false);
    }
  }

  Future<void> submitQuizResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      _setLoading(true);
      await _repository.submitQuizResult(
        moduleId: moduleId,
        quizId: quizId,
        percentage: percentage,
        quizContent: quizContent,
      );
      _error = null;
    } catch (e) {
      _error = e.toString();
      rethrow; // Changed from throw e to rethrow
    } finally {
      _setLoading(false);
    }
  }

  void _setLoading(bool value) {
    _isLoading = value;
    notifyListeners();
  }

  void clearError() {
    _error = null;
    notifyListeners();
  }
}

lib/providers/result_provider.dart
import 'package:flutter/foundation.dart';
import '../data/models/result.dart';
import '../data/repositories/result_repository.dart';

class ResultProvider extends ChangeNotifier {
  final ResultRepository _repository;
  List<Result> _results = [];
  Map<String, dynamic>? _leaderboard;
  bool _isLoading = false;
  String? _error;

  ResultProvider(this._repository);

  List<Result> get results => _results;
  Map<String, dynamic>? get leaderboard => _leaderboard;
  bool get isLoading => _isLoading;
  String? get error => _error;

  Future<void> fetchResults(int moduleId, int quizId) async {
    try {
      _setLoading(true);
      _results = await _repository.getResults(moduleId, quizId);
      _error = null;
    } catch (e) {
      _error = e.toString();
    } finally {
      _setLoading(false);
    }
  }

  Future<void> submitResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      _setLoading(true);
      final result = await _repository.submitResult(
        moduleId: moduleId,
        quizId: quizId,
        percentage: percentage,
        quizContent: quizContent,
      );
      _results = [result, ..._results];
      _error = null;
    } catch (e) {
      _error = e.toString();
      throw e;
    } finally {
      _setLoading(false);
    }
  }

  Future<void> fetchLeaderboard(int moduleId, int quizId) async {
    try {
      _setLoading(true);
      _leaderboard = await _repository.getLeaderboard(moduleId, quizId);
      _error = null;
    } catch (e) {
      _error = e.toString();
    } finally {
      _setLoading(false);
    }
  }

  void _setLoading(bool value) {
    _isLoading = value;
    notifyListeners();
  }

  void clearError() {
    _error = null;
    notifyListeners();
  }
}

lib/services/api_config.dart
import 'package:dio/dio.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class ApiConfig {
  static const String baseUrl = 'http://10.0.2.2:8000/api';
  static const FlutterSecureStorage _secureStorage = FlutterSecureStorage();
  static const String _tokenKey = 'auth_token';

  // Create a single instance of Dio with BaseOptions
  static final Dio _dio = Dio(
    BaseOptions(
      baseUrl: baseUrl,
      connectTimeout: const Duration(seconds: 10),
      receiveTimeout: const Duration(seconds: 8),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    ),
  )..interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          try {
            // Add auth token to all requests if it exists
            final token = await _secureStorage.read(key: _tokenKey);
            if (token != null) {
              options.headers['Authorization'] = 'Bearer $token';
            }
          } catch (e) {
            print('Error reading token: $e');
            // Continue without token if there's an error
          }
          return handler.next(options);
        },
        onError: (error, handler) async {
          if (error.response?.statusCode == 401) {
            try {
              // Token expired or invalid
              await _secureStorage.delete(key: _tokenKey);
            } catch (e) {
              print('Error deleting token: $e');
            }
          }
          return handler.next(error);
        },
      ),
    );

  // Getter for the Dio instance
  static Dio get dio => _dio;

  // Methods to handle auth token
  static Future<void> setAuthToken(String token) async {
    try {
      await _secureStorage.write(key: _tokenKey, value: token);
    } catch (e) {
      print('Error saving token: $e');
      rethrow;
    }
  }

  static Future<void> removeAuthToken() async {
    try {
      await _secureStorage.delete(key: _tokenKey);
    } catch (e) {
      print('Error removing token: $e');
      rethrow;
    }
  }

  static Future<bool> hasToken() async {
    try {
      final token = await _secureStorage.read(key: _tokenKey);
      return token != null;
    } catch (e) {
      print('Error checking token: $e');
      return false;
    }
  }

  static Future<String?> getToken() async {
    try {
      return await _secureStorage.read(key: _tokenKey);
    } catch (e) {
      print('Error getting token: $e');
      return null;
    }
  }
}

lib/services/auth_api_service.dart
import 'package:dio/dio.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'api_config.dart';

class AuthApiService {
  final Dio _dio;
  final FlutterSecureStorage _storage;

  AuthApiService()
      : _dio = ApiConfig.dio,
        _storage = const FlutterSecureStorage();

  Future<Map<String, dynamic>> login(String username, String password) async {
    try {
      final response = await _dio.post('/users/login/', data: {
        'username': username,
        'password': password,
      });

      // Store tokens securely
      if (response.data['access'] != null) {
        await _storage.write(key: 'auth_token', value: response.data['access']);
      }
      if (response.data['refresh'] != null) {
        await _storage.write(
            key: 'refresh_token', value: response.data['refresh']);
      }

      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<void> register({
    required String username,
    required String email,
    required String password,
    required String role,
    String? firstName,
    String? lastName,
  }) async {
    try {
      await _dio.post('/users/register/', data: {
        'username': username,
        'email': email,
        'password': password,
        'role': role,
        if (firstName != null) 'first_name': firstName,
        if (lastName != null) 'last_name': lastName,
      });
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> refreshToken(String refreshToken) async {
    try {
      final response = await _dio.post('/auth/token/refresh/', data: {
        'refresh': refreshToken,
      });

      // Store new access token
      if (response.data['access'] != null) {
        await _storage.write(key: 'auth_token', value: response.data['access']);
      }

      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<void> logout() async {
    try {
      await _dio.post('/auth/logout/');
      // Clear stored tokens
      await _storage.delete(key: 'auth_token');
      await _storage.delete(key: 'refresh_token');
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<String?> getStoredToken() async {
    return await _storage.read(key: 'auth_token');
  }

  Future<String?> getStoredRefreshToken() async {
    return await _storage.read(key: 'refresh_token');
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        // Clear tokens on authentication error
        _storage.delete(key: 'auth_token');
        _storage.delete(key: 'refresh_token');
        return 'Authentication failed. Please login again.';
      }

      if (e.response!.data is Map) {
        return e.response!.data['detail'] ?? 'An error occurred';
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    return e.message ?? 'Network error occurred';
  }
}

lib/services/course_api_service.dart
import 'package:dio/dio.dart';
import 'api_config.dart';

class CourseApiService {
  final Dio _dio;

  CourseApiService() : _dio = ApiConfig.dio;

  Future<List<dynamic>> fetchCourses() async {
    try {
      final response = await _dio.get('/courses/');
      if (response.statusCode == 200) {
        return response.data;
      } else {
        throw 'Failed to fetch courses';
      }
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> getCourseDetail(int courseId) async {
    try {
      final response = await _dio.get('/courses/$courseId/');
      if (response.statusCode == 200) {
        return response.data;
      } else {
        throw 'Failed to get course details';
      }
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> createCourse(
      Map<String, dynamic> courseData) async {
    try {
      final response = await _dio.post('/courses/', data: courseData);
      if (response.statusCode == 201) {
        return response.data;
      } else {
        throw 'Failed to create course';
      }
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> updateCourse(
      int courseId, Map<String, dynamic> courseData) async {
    try {
      final response = await _dio.put('/courses/$courseId/', data: courseData);
      if (response.statusCode == 200) {
        return response.data;
      } else {
        throw 'Failed to update course';
      }
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<void> deleteCourse(int courseId) async {
    try {
      final response = await _dio.delete('/courses/$courseId/');
      if (response.statusCode != 204) {
        throw 'Failed to delete course';
      }
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to access this content';
      }
      if (e.response!.data is Map) {
        final error = e.response!.data['detail'] ?? e.response!.data['error'];
        if (error != null) return error.toString();
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    if (e.type == DioExceptionType.connectionTimeout) {
      return 'Connection timed out';
    }
    if (e.type == DioExceptionType.connectionError) {
      return 'Please check your internet connection';
    }
    return 'Network error occurred';
  }
}

lib/services/enrollment_api_service.dart
import 'package:dio/dio.dart';
import 'api_config.dart';

class EnrollmentApiService {
  final Dio _dio;

  EnrollmentApiService() : _dio = ApiConfig.dio;

  Future<List<dynamic>> fetchTeacherEnrollmentRequests() async {
    try {
      final response = await _dio.get('/enrollments/teacher/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<List<dynamic>> fetchStudentEnrollmentRequests() async {
    try {
      final response = await _dio.get('/enrollments/student/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<void> respondToEnrollment(int requestId, bool isApproved) async {
    try {
      await _dio.post('/enrollments/$requestId/respond/', data: {
        'is_approved': isApproved,
      });
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to manage enrollments';
      }
      if (e.response!.data is Map) {
        return e.response!.data['detail'] ?? 'An error occurred';
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    return e.message ?? 'Network error occurred';
  }
}

lib/services/module_api_service.dart
import 'package:dio/dio.dart';
import 'api_config.dart';

class ModuleApiService {
  final Dio _dio;

  ModuleApiService() : _dio = ApiConfig.dio;

  Future<List<dynamic>> fetchModules(int courseId) async {
    try {
      final response =
          await _dio.get('/modules/', queryParameters: {'course_id': courseId});
      print(
          'Fetching modules from: ${_dio.options.baseUrl}/modules/?course_id=$courseId');
      print('Raw API Response: ${response.data}');

      if (response.data is List) {
        return response.data as List<dynamic>;
      } else if (response.data is Map && response.data['results'] is List) {
        return response.data['results'] as List<dynamic>;
      } else if (response.data is Map && response.data['modules'] is List) {
        return response.data['modules'] as List<dynamic>;
      } else {
        print('Unexpected response format: ${response.data}');
        return [];
      }
    } on DioException catch (e) {
      print('Dio Error: ${e.message}');
      print('Response: ${e.response?.data}');
      print('Request URL: ${e.requestOptions.uri}');
      print('Query Parameters: ${e.requestOptions.queryParameters}');

      if (e.response?.statusCode == 404) {
        print('No modules found for course $courseId');
        return [];
      }
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> fetchModuleDetails(int moduleId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/');
      return response.data as Map<String, dynamic>;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> createModule(
      int courseId, String title, String description) async {
    try {
      final response = await _dio.post('/courses/$courseId/modules/', data: {
        'title': title,
        'description': description,
      });
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> updateModule(
      int moduleId, String title, String description) async {
    try {
      final response = await _dio.put('/modules/$moduleId/', data: {
        'title': title,
        'description': description,
      });
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<void> deleteModule(int moduleId) async {
    try {
      await _dio.delete('/modules/$moduleId/');
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to access module content';
      }
      if (e.response!.data is Map) {
        return e.response!.data['detail'] ?? 'An error occurred';
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    return e.message ?? 'Network error occurred';
  }
}

lib/services/note_api_service.dart
import 'package:dio/dio.dart';
import 'api_config.dart';

class NoteApiService {
  final Dio _dio;

  NoteApiService() : _dio = ApiConfig.dio;

  // Fetch all notes for a module
  Future<List<dynamic>> fetchNotes(int moduleId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/notes/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  // Get a single note
  Future<Map<String, dynamic>> getNote(int noteId) async {
    try {
      final response = await _dio.get('/notes/$noteId/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  // Create a new note
  Future<Map<String, dynamic>> createNote(
    int moduleId,
    String title,
    String content,
  ) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/notes/',
        data: {
          'title': title,
          'content': content,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  // Update an existing note
  Future<Map<String, dynamic>> updateNote(
    int noteId,
    String title,
    String content,
  ) async {
    try {
      final response = await _dio.put(
        '/notes/$noteId/',
        data: {
          'title': title,
          'content': content,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  // Delete a note
  Future<void> deleteNote(int noteId) async {
    try {
      await _dio.delete('/notes/$noteId/');
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  // Generate quiz from selected notes
  Future<Map<String, dynamic>> generateQuizFromNotes(
    int moduleId,
    List<int> noteIds,
  ) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/notes/generate-quiz/',
        data: {
          'note_ids': noteIds,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  // Generate quiz from a single note
  Future<Map<String, dynamic>> generateQuizFromSingleNote(
    int moduleId,
    int noteId,
    String quizTitle,
  ) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/notes/$noteId/generate-quiz/',
        data: {
          'quiz_title': quizTitle,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to access notes';
      }
      if (e.response!.statusCode == 403) {
        return 'You don\'t have permission to perform this action';
      }
      if (e.response!.statusCode == 404) {
        return 'Note not found';
      }
      if (e.response!.statusCode == 413) {
        return 'Content too long';
      }
      if (e.response!.data is Map) {
        final errorMessage = e.response!.data['detail'] ??
            e.response!.data['error'] ??
            'An error occurred';
        return errorMessage.toString();
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }

    if (e.type == DioExceptionType.connectionTimeout) {
      return 'Connection timed out';
    }
    if (e.type == DioExceptionType.receiveTimeout) {
      return 'Server not responding';
    }
    if (e.type == DioExceptionType.connectionError) {
      return 'Please check your internet connection';
    }

    return e.message ?? 'Network error occurred';
  }
}

lib/services/quiz_api_service.dart
import 'package:dio/dio.dart';
import 'api_config.dart';

class QuizApiService {
  final Dio _dio;

  QuizApiService() : _dio = ApiConfig.dio;

  Future<List<dynamic>> fetchQuizzes(int moduleId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/quizzes/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> createQuiz({
    required int moduleId,
    required String title,
    required String description,
    required String content,
    required String quizDuration,
  }) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/quizzes/',
        data: {
          'title': title,
          'description': description,
          'content': content,
          'quiz_duration': quizDuration,
          'module': moduleId,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> getQuizDetail(int moduleId, int quizId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/quizzes/$quizId/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> submitQuizResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/quizzes/$quizId/submit/',
        data: {
          'percentage': percentage,
          'quiz_content': quizContent,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to access quiz content';
      }
      if (e.response!.data is Map) {
        return e.response!.data['detail'] ?? 'An error occurred';
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    return e.message ?? 'Network error occurred';
  }
}

lib/services/result_api_service.dart
import 'package:dio/dio.dart';
import 'api_config.dart';

class ResultApiService {
  final Dio _dio;

  ResultApiService() : _dio = ApiConfig.dio;

  Future<List<dynamic>> fetchResults(int moduleId, int quizId) async {
    try {
      final response = await _dio.get('/results/$moduleId/quizzes/$quizId/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> submitResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      final response = await _dio.post(
        '/results/$moduleId/quizzes/$quizId/',
        data: {
          'percentage': percentage,
          'quiz_content': quizContent,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> getLeaderboard(int moduleId, int quizId) async {
    try {
      final response = await _dio.get(
        '/results/$moduleId/quizzes/$quizId/leaderboard/',
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to access results';
      }
      if (e.response!.data is Map) {
        if (e.response!.data['code'] == 'duplicate_submission') {
          return 'You have already submitted this quiz';
        }
        return e.response!.data['detail'] ?? 'An error occurred';
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    return e.message ?? 'Network error occurred';
  }
}

lib/services/routes.dart
import 'package:flutter/material.dart';
import '../ui/screens/auth/login_screen.dart';
import '../ui/screens/auth/registration_screen.dart';
import '../ui/screens/auth/welcome_screen.dart';
import '../ui/screens/course/course_detail_screen.dart';
import '../ui/screens/course/course_list_screen.dart';
import '../ui/screens/home/home_screen.dart';
import '../ui/screens/modules/module_detail_screen.dart';
import '../ui/screens/modules/module_list_screen.dart';
import '../ui/screens/notes/note_detail_screen.dart';
import '../ui/screens/notes/notes_list_screen.dart';
import '../ui/screens/quiz/quiz_detail_screen.dart';
import '../ui/screens/quiz/results_screen.dart';
import '../ui/controllers/quiz_controller.dart';

class AppRoutes {
  // Auth Routes
  static const String welcome = '/';
  static const String login = '/login';
  static const String register = '/register';

  // Main Routes
  static const String home = '/home';

  // Course Routes
  static const String courseList = '/course-list';
  static const String courseDetail = '/course-detail';

  // Module Routes
  static const String moduleList = '/module-list';
  static const String moduleDetail = '/module-detail';

  // Note Routes
  static const String notesList = '/notes-list';
  static const String noteDetail = '/note-detail';

  // Quiz Routes
  static const String quizDetail = '/quiz-detail';
  static const String quizResults = '/quiz-results';

  static Route<dynamic> generateRoute(RouteSettings settings) {
    switch (settings.name) {
      // Auth Routes
      case welcome:
        return MaterialPageRoute(builder: (_) => const WelcomeScreen());

      case login:
        return MaterialPageRoute(builder: (_) => const LoginScreen());

      case register:
        return MaterialPageRoute(builder: (_) => const RegistrationScreen());

      // Main Routes
      case home:
        return MaterialPageRoute(builder: (_) => const HomeScreen());

      // Course Routes
      case courseList:
        return MaterialPageRoute(builder: (_) => const CourseListScreen());

      case courseDetail:
        final courseId = settings.arguments as int?;
        if (courseId == null) {
          return MaterialPageRoute(
            builder: (_) => const Scaffold(
              body: Center(child: Text('Invalid course ID')),
            ),
          );
        }
        return MaterialPageRoute(
          builder: (_) => CourseDetailScreen(courseId: courseId),
        );

      // Module Routes
      case moduleList:
        final args = settings.arguments as Map<String, dynamic>?;
        if (args == null || !args.containsKey('courseId')) {
          return MaterialPageRoute(
            builder: (_) => const Scaffold(
              body: Center(child: Text('Invalid module list parameters')),
            ),
          );
        }
        return MaterialPageRoute(
          builder: (_) => ModuleListScreen(
            courseId: args['courseId'] as int,
          ),
        );

      case moduleDetail:
        final args = settings.arguments as Map<String, dynamic>?;
        if (args == null ||
            !args.containsKey('moduleId') ||
            !args.containsKey('courseId')) {
          return MaterialPageRoute(
            builder: (_) => const Scaffold(
              body: Center(child: Text('Invalid module parameters')),
            ),
          );
        }
        return MaterialPageRoute(
          builder: (_) => ModuleDetailScreen(
            moduleId: args['moduleId'] as int,
            courseId: args['courseId'] as int,
          ),
        );

      // Note Routes
      case notesList:
        final args = settings.arguments as Map<String, dynamic>?;
        if (args == null || !args.containsKey('moduleId')) {
          return MaterialPageRoute(
            builder: (_) => const Scaffold(
              body: Center(child: Text('Invalid notes list parameters')),
            ),
          );
        }
        return MaterialPageRoute(
          builder: (_) => NotesListScreen(
            moduleId: args['moduleId'] as int,
          ),
        );

      case noteDetail:
        final args = settings.arguments as Map<String, dynamic>?;
        if (args == null || !args.containsKey('moduleId')) {
          return MaterialPageRoute(
            builder: (_) => const Scaffold(
              body: Center(child: Text('Invalid note parameters')),
            ),
          );
        }
        return MaterialPageRoute(
          builder: (_) => NoteDetailScreen(
            moduleId: args['moduleId'] as int,
            noteId: args['noteId'] as int?,
          ),
        );

      // Quiz Routes
      case quizDetail:
        final args = settings.arguments as Map<String, dynamic>?;
        if (args == null ||
            !args.containsKey('quizId') ||
            !args.containsKey('moduleId')) {
          return MaterialPageRoute(
            builder: (_) => const Scaffold(
              body: Center(child: Text('Invalid quiz parameters')),
            ),
          );
        }
        return MaterialPageRoute(
          builder: (_) => QuizDetailScreen(
            quizId: args['quizId'] as int,
            moduleId: args['moduleId'] as int,
          ),
        );

      case quizResults:
        final args = settings.arguments as Map<String, dynamic>?;
        if (args == null) {
          return MaterialPageRoute(
            builder: (_) => const Scaffold(
              body: Center(child: Text('Invalid quiz results parameters')),
            ),
          );
        }
        return MaterialPageRoute(
          builder: (_) => ResultsScreen(
            quizId: args['quizId'] as int,
            moduleId: args['moduleId'] as int,
            score: args['score'] as double,
            questions: args['questions'] as List<ParsedQuestion>,
            answers: args['answers'] as Map<String, String>,
          ),
        );

      default:
        return MaterialPageRoute(
          builder: (_) => Scaffold(
            body: Center(
              child: Text('No route defined for ${settings.name}'),
            ),
          ),
        );
    }
  }
}

lib/services/secure_service.dart
import 'package:dio/dio.dart';
import 'api_config.dart';

class QuizApiService {
  final Dio _dio;

  QuizApiService() : _dio = ApiConfig.dio;

  Future<List<dynamic>> fetchQuizzes(int moduleId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/quizzes/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> createQuiz({
    required int moduleId,
    required String title,
    required String description,
    required String content,
    required String quizDuration,
  }) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/quizzes/',
        data: {
          'title': title,
          'description': description,
          'content': content,
          'quiz_duration': quizDuration,
          'module': moduleId,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> getQuizDetail(int moduleId, int quizId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/quizzes/$quizId/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> submitQuizResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/quizzes/$quizId/submit/',
        data: {
          'percentage': percentage,
          'quiz_content': quizContent,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to access quiz content';
      }
      if (e.response!.data is Map) {
        return e.response!.data['detail'] ?? 'An error occurred';
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    return e.message ?? 'Network error occurred';
  }
}

lib/ui/controller/quiz_controller.dart
class QuizController {
  static final QuizController _instance = QuizController._internal();
  factory QuizController() => _instance;
  QuizController._internal();

  // Parse quiz content into structured format for display
  List<ParsedQuestion> parseQuizContent(String content) {
    final lines = content.split('\n');
    final questions = <ParsedQuestion>[];

    ParsedQuestion? currentQuestion;
    List<String> currentOptions = [];

    for (var line in lines) {
      line = line.trim();
      if (line.isEmpty) continue;

      // Match question pattern: "1. What is..."
      if (RegExp(r'^\d+\.').hasMatch(line)) {
        if (currentQuestion != null) {
          questions.add(currentQuestion);
        }

        final questionText = line.replaceFirst(RegExp(r'^\d+\.\s*'), '');
        currentQuestion = ParsedQuestion(
          text: questionText,
          options: [],
          correctAnswer: '',
        );
        currentOptions = [];
      }
      // Match option pattern: "A) Option"
      else if (RegExp(r'^[A-D]\)').hasMatch(line)) {
        final option = line.substring(3).trim();
        currentOptions.add(option);
      }
      // Match correct answer pattern: "Correct Answer: X"
      else if (line.startsWith('Correct Answer:')) {
        final answer = line.split(':')[1].trim();
        if (currentQuestion != null) {
          currentQuestion = currentQuestion.copyWith(
            options: List.from(currentOptions),
            correctAnswer: currentOptions[_letterToIndex(answer)],
          );
        }
      }
    }

    // Add the last question
    if (currentQuestion != null) {
      questions.add(currentQuestion);
    }

    return questions;
  }

  // Format questions back into quiz content format
  String formatQuizContent(List<ParsedQuestion> questions) {
    final buffer = StringBuffer();

    for (var i = 0; i < questions.length; i++) {
      final q = questions[i];

      // Add question number and text
      buffer.writeln('${i + 1}. ${q.text}');
      buffer.writeln();

      // Add options with letters
      for (var j = 0; j < q.options.length; j++) {
        buffer.writeln('${_indexToLetter(j)}) ${q.options[j]}');
      }

      // Add correct answer
      final correctIndex = q.options.indexOf(q.correctAnswer);
      buffer.writeln('Correct Answer: ${_indexToLetter(correctIndex)}');
      buffer.writeln();
    }

    return buffer.toString().trim();
  }

  // Validation methods
  bool validateQuizContent(String content) {
    try {
      final questions = parseQuizContent(content);
      return questions.isNotEmpty &&
          questions.every((q) =>
              q.options.length == 4 && q.options.contains(q.correctAnswer));
    } catch (e) {
      return false;
    }
  }

  bool validateQuestion(ParsedQuestion question) {
    return question.options.length == 4 &&
        question.options.contains(question.correctAnswer) &&
        question.text.isNotEmpty;
  }

  // Scoring and progress methods
  double calculateScore(
      Map<String, String> answers, List<ParsedQuestion> questions) {
    if (questions.isEmpty) return 0.0;

    int correct = 0;
    for (var question in questions) {
      if (answers[question.text] == question.correctAnswer) {
        correct++;
      }
    }
    return (correct / questions.length) * 100;
  }

  double calculateProgress(int answeredCount, int totalQuestions) {
    if (totalQuestions == 0) return 0.0;
    return answeredCount / totalQuestions;
  }

  // Helper methods
  List<String> shuffleOptions(List<String> options) {
    final shuffled = List<String>.from(options);
    shuffled.shuffle();
    return shuffled;
  }

  int _letterToIndex(String letter) {
    return letter.trim().toUpperCase().codeUnitAt(0) - 'A'.codeUnitAt(0);
  }

  String _indexToLetter(int index) {
    return String.fromCharCode('A'.codeUnitAt(0) + index);
  }

  // Message formatting methods
  String getProgressMessage(double progress) {
    final percentage = (progress * 100).toStringAsFixed(0);
    return '$percentage% complete';
  }

  String getScoreMessage(double score) {
    if (score >= 90) return 'Excellent! You\'ve mastered this topic!';
    if (score >= 80) return 'Great job! You have a solid understanding!';
    if (score >= 70) return 'Good work! Keep practicing to improve!';
    if (score >= 60) return 'You passed! Review the topics you missed.';
    return 'Keep studying and try again. You can do it!';
  }

  // Quiz creation helper
  String createQuizContent(List<Map<String, dynamic>> questions) {
    final parsedQuestions = questions
        .map((q) => ParsedQuestion(
              text: q['question'] as String,
              options: List<String>.from(q['options']),
              correctAnswer: q['correctAnswer'] as String,
            ))
        .toList();

    return formatQuizContent(parsedQuestions);
  }
}

class ParsedQuestion {
  final String text;
  final List<String> options;
  final String correctAnswer;

  ParsedQuestion({
    required this.text,
    required this.options,
    required this.correctAnswer,
  });

  ParsedQuestion copyWith({
    String? text,
    List<String>? options,
    String? correctAnswer,
  }) {
    return ParsedQuestion(
      text: text ?? this.text,
      options: options ?? this.options,
      correctAnswer: correctAnswer ?? this.correctAnswer,
    );
  }
}

lib/ui/screens/auth/login_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:app/constants/constants.dart';
import 'package:app/widgets/widgets.dart';
import 'package:app/providers/auth_provider.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isPasswordVisible = false;

  @override
  void dispose() {
    _usernameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _handleLogin() async {
    if (_formKey.currentState!.validate()) {
      try {
        final authProvider = Provider.of<AuthProvider>(context, listen: false);
        await authProvider.login(
          _usernameController.text,
          _passwordController.text,
        );
        if (mounted) {
          Navigator.pushReplacementNamed(context, '/home');
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(e.toString()),
              backgroundColor: AppColors.error,
            ),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        width: double.infinity,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              AppColors.primary,
              AppColors.primaryLight,
              AppColors.white,
            ],
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const SizedBox(height: 40),
            // Back Button
            Padding(
              padding: const EdgeInsets.all(Dimensions.md),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: AppColors.white),
                onPressed: () => Navigator.pop(context),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(Dimensions.lg),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Welcome Back!',
                    style: TextStyles.h1.copyWith(color: AppColors.white),
                  ),
                  const SizedBox(height: Dimensions.sm),
                  Text(
                    'Please sign in to continue',
                    style:
                        TextStyles.bodyMedium.copyWith(color: AppColors.white),
                  ),
                ],
              ),
            ),
            const SizedBox(height: Dimensions.md),
            Expanded(
              child: Container(
                decoration: const BoxDecoration(
                  color: AppColors.white,
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(60),
                    topRight: Radius.circular(60),
                  ),
                ),
                child: Consumer<AuthProvider>(
                  builder: (context, authProvider, child) {
                    return LoadingOverlay(
                      isLoading: authProvider.isLoading,
                      child: SingleChildScrollView(
                        padding: const EdgeInsets.all(Dimensions.lg),
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              const SizedBox(height: Dimensions.xl),
                              CustomTextField(
                                controller: _usernameController,
                                labelText: 'Username',
                                prefixIcon: Icons.person_outline,
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Please enter your username';
                                  }
                                  return null;
                                },
                              ),
                              const SizedBox(height: Dimensions.md),
                              CustomTextField(
                                controller: _passwordController,
                                labelText: 'Password',
                                prefixIcon: Icons.lock_outline,
                                obscureText: !_isPasswordVisible,
                                suffixIcon: IconButton(
                                  icon: Icon(
                                    _isPasswordVisible
                                        ? Icons.visibility_off
                                        : Icons.visibility,
                                    color: AppColors.grey,
                                  ),
                                  onPressed: () {
                                    setState(() {
                                      _isPasswordVisible = !_isPasswordVisible;
                                    });
                                  },
                                ),
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Please enter your password';
                                  }
                                  return null;
                                },
                              ),
                              const SizedBox(height: Dimensions.xl),
                              SizedBox(
                                height: Dimensions.buttonHeight,
                                child: ElevatedButton(
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: AppColors.primary,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(
                                        Dimensions.borderRadiusLg,
                                      ),
                                    ),
                                  ),
                                  onPressed: _handleLogin,
                                  child: Text(
                                    'Login',
                                    style: TextStyles.buttonText.copyWith(
                                      color: AppColors.white,
                                    ),
                                  ),
                                ),
                              ),
                              if (authProvider.error != null)
                                Padding(
                                  padding:
                                      const EdgeInsets.only(top: Dimensions.md),
                                  child: Text(
                                    authProvider.error!,
                                    style: TextStyles.error,
                                    textAlign: TextAlign.center,
                                  ),
                                ),
                              const SizedBox(height: Dimensions.md),
                              TextButton(
                                onPressed: () => Navigator.pushNamed(
                                  context,
                                  '/forgot-password',
                                ),
                                child: Text(
                                  'Forgot Password?',
                                  style: TextStyles.bodyMedium.copyWith(
                                    color: AppColors.primary,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

lib/ui/screens/auth/registration_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../../providers/auth_provider.dart';
import 'package:app/widgets/widgets.dart';
import 'package:app/constants/constants.dart';

class RegistrationScreen extends StatefulWidget {
  const RegistrationScreen({Key? key}) : super(key: key);

  @override
  _RegistrationScreenState createState() => _RegistrationScreenState();
}

class _RegistrationScreenState extends State<RegistrationScreen> {
  final _formKey = GlobalKey<FormState>();
  final _usernameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  String _selectedRole = 'student';
  bool _isPasswordVisible = false;
  bool _isConfirmPasswordVisible = false;

  @override
  void dispose() {
    _usernameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  Future<void> _handleRegistration() async {
    if (_formKey.currentState!.validate()) {
      try {
        final authProvider = Provider.of<AuthProvider>(context, listen: false);
        await authProvider.register(
          username: _usernameController.text,
          email: _emailController.text,
          password: _passwordController.text,
          role: _selectedRole,
        );
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Registration successful! Please login.'),
              backgroundColor: AppColors.success,
            ),
          );
          Navigator.pushReplacementNamed(context, '/login');
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(e.toString()),
              backgroundColor: AppColors.error,
            ),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: AppColors.primary),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Consumer<AuthProvider>(
        builder: (context, authProvider, child) {
          return LoadingOverlay(
            isLoading: authProvider.isLoading,
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(Dimensions.lg),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Text(
                      'Create Account',
                      style: TextStyles.h1,
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: Dimensions.sm),
                    Text(
                      'Please fill in the form to continue',
                      style: TextStyles.bodyMedium,
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: Dimensions.xl),
                    CustomTextField(
                      controller: _usernameController,
                      labelText: 'Username',
                      prefixIcon: Icons.person_outline,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter a username';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: Dimensions.md),
                    CustomTextField(
                      controller: _emailController,
                      labelText: 'Email',
                      prefixIcon: Icons.email_outlined,
                      keyboardType: TextInputType.emailAddress,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter an email';
                        }
                        if (!value.contains('@')) {
                          return 'Please enter a valid email';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: Dimensions.md),
                    CustomTextField(
                      controller: _passwordController,
                      labelText: 'Password',
                      prefixIcon: Icons.lock_outline,
                      obscureText: !_isPasswordVisible,
                      suffixIcon: IconButton(
                        icon: Icon(
                          _isPasswordVisible
                              ? Icons.visibility_off
                              : Icons.visibility,
                        ),
                        onPressed: () {
                          setState(() {
                            _isPasswordVisible = !_isPasswordVisible;
                          });
                        },
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter a password';
                        }
                        if (value.length < 6) {
                          return 'Password must be at least 6 characters';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: Dimensions.md),
                    CustomTextField(
                      controller: _confirmPasswordController,
                      labelText: 'Confirm Password',
                      prefixIcon: Icons.lock_outline,
                      obscureText: !_isConfirmPasswordVisible,
                      suffixIcon: IconButton(
                        icon: Icon(
                          _isConfirmPasswordVisible
                              ? Icons.visibility_off
                              : Icons.visibility,
                        ),
                        onPressed: () {
                          setState(() {
                            _isConfirmPasswordVisible =
                                !_isConfirmPasswordVisible;
                          });
                        },
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please confirm your password';
                        }
                        if (value != _passwordController.text) {
                          return 'Passwords do not match';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: Dimensions.md),
                    DropdownButtonFormField<String>(
                      value: _selectedRole,
                      decoration: InputDecoration(
                        labelText: 'Role',
                        prefixIcon: const Icon(Icons.person_outline),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(Dimensions.sm),
                        ),
                      ),
                      items: const [
                        DropdownMenuItem(
                          value: 'student',
                          child: Text('Student'),
                        ),
                        DropdownMenuItem(
                          value: 'teacher',
                          child: Text('Teacher'),
                        ),
                      ],
                      onChanged: (value) {
                        setState(() {
                          _selectedRole = value!;
                        });
                      },
                    ),
                    const SizedBox(height: Dimensions.xl),
                    CustomButton(
                      text: 'Register',
                      onPressed: _handleRegistration,
                    ),
                    if (authProvider.error != null)
                      Padding(
                        padding: const EdgeInsets.only(top: Dimensions.md),
                        child: Text(
                          authProvider.error!,
                          style: TextStyles.error,
                          textAlign: TextAlign.center,
                        ),
                      ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}

lib/ui/screens/auth/welcome_screen.dart
import 'package:flutter/material.dart';
import 'package:app/ui/screens/auth/login_screen.dart';
import 'package:app/ui/screens/auth/registration_screen.dart';
import 'package:app/constants/constants.dart';

class WelcomeScreen extends StatelessWidget {
  const WelcomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        width: double.infinity,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              AppColors.primary,
              AppColors.primaryLight,
              AppColors.white,
            ],
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            const SizedBox(height: 80),
            Padding(
              padding: const EdgeInsets.all(Dimensions.lg),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    "Welcome to VirtuLearn",
                    style: TextStyles.h1.copyWith(color: AppColors.white),
                  ),
                  // Text(
                  //   "VirtuLearn",
                  //   style: TextStyles.h1.copyWith(
                  //     color: AppColors.white,
                  //     fontWeight: FontWeight.w700,
                  //   ),
                  // ),
                ],
              ),
            ),
            const SizedBox(height: Dimensions.md),
            Expanded(
              child: Container(
                decoration: const BoxDecoration(
                  color: AppColors.white,
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(60),
                    topRight: Radius.circular(60),
                  ),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(Dimensions.lg),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      const Spacer(),
                      Image.asset(
                        'assets/screens/welcome.png', // Make sure this asset exists
                        height: 200,
                      ),
                      const Spacer(),
                      SizedBox(
                        width: double.infinity,
                        height: Dimensions.buttonHeight,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: AppColors.primary,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(
                                  Dimensions.borderRadiusLg),
                            ),
                          ),
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => const LoginScreen(),
                              ),
                            );
                          },
                          child: Text(
                            "Login",
                            style: TextStyles.buttonText.copyWith(
                              color: AppColors.white,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: Dimensions.md),
                      SizedBox(
                        width: double.infinity,
                        height: Dimensions.buttonHeight,
                        child: OutlinedButton(
                          style: OutlinedButton.styleFrom(
                            side: const BorderSide(color: AppColors.primary),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(
                                  Dimensions.borderRadiusLg),
                            ),
                          ),
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) =>
                                    const RegistrationScreen(),
                              ),
                            );
                          },
                          child: Text(
                            "Sign Up",
                            style: TextStyles.buttonText.copyWith(
                              color: AppColors.primary,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: Dimensions.lg),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}




lib/ui/screens/home/home_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:motion_tab_bar_v2/motion-tab-controller.dart';
import 'package:app/constants/constants.dart';
import 'package:app/widgets/common/app_bar.dart';
import 'package:app/widgets/common/bottom_navigation.dart';
import 'package:app/widgets/common/loading_overlay.dart';
import 'package:app/widgets/home/stats_card.dart';
import 'package:app/widgets/home/course_card.dart';
import 'package:app/providers/auth_provider.dart';
import 'package:app/providers/course_provider.dart';
import 'package:app/services/routes.dart';
import 'package:app/data/models/course.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  late MotionTabBarController _tabController;
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    _tabController = MotionTabBarController(
      initialIndex: 0,
      length: 4,
      vsync: this,
    );

    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadInitialData();
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadInitialData() async {
    final courseProvider = Provider.of<CourseProvider>(context, listen: false);
    await courseProvider.fetchCourses();
  }

  void _handleSearch(String query) {
    setState(() {
      _searchQuery = query.toLowerCase();
    });
  }

  List<Course> _getFilteredCourses(List<Course> courses) {
    if (_searchQuery.isEmpty) return courses;
    return courses
        .where((course) =>
            course.name.toLowerCase().contains(_searchQuery) ||
            course.description.toLowerCase().contains(_searchQuery))
        .toList();
  }

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<AuthProvider>(context);
    final courseProvider = Provider.of<CourseProvider>(context);
    final user = authProvider.user;

    return Scaffold(
      appBar: CustomAppBar(
        title: 'VirtuLearn',
        showBackButton: false,
        showSearch: true,
        onSearchChanged: _handleSearch,
      ),
      body: LoadingOverlay(
        isLoading: courseProvider.isLoading,
        child: RefreshIndicator(
          onRefresh: _loadInitialData,
          child: SingleChildScrollView(
            physics: const AlwaysScrollableScrollPhysics(),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (user?.role == 'student') ...[
                  Padding(
                    padding: const EdgeInsets.all(Dimensions.lg),
                    child: Row(
                      children: [
                        Expanded(
                          child: StatsCard(
                            title: 'Courses',
                            value: courseProvider.courses.length.toString(),
                            icon: Icons.book_outlined,
                            gradient: const LinearGradient(
                              colors: [
                                AppColors.primary,
                                AppColors.primaryLight
                              ],
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                            ),
                          ),
                        ),
                        const SizedBox(width: Dimensions.md),
                        Expanded(
                          child: StatsCard(
                            title: 'Quizzes',
                            value: courseProvider.totalQuizzes.toString(),
                            icon: Icons.quiz_outlined,
                            gradient: const LinearGradient(
                              colors: [
                                AppColors.secondary,
                                AppColors.secondaryLight
                              ],
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                            ),
                          ),
                        ),
                        const SizedBox(width: Dimensions.md),
                        Expanded(
                          child: StatsCard(
                            title: 'Progress',
                            value:
                                '${courseProvider.averageProgress.toStringAsFixed(0)}%',
                            icon: Icons.trending_up_outlined,
                            gradient: const LinearGradient(
                              colors: [
                                AppColors.success,
                                AppColors.successLight
                              ],
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
                Padding(
                  padding: const EdgeInsets.symmetric(
                    horizontal: Dimensions.lg,
                    vertical: Dimensions.md,
                  ),
                  child: Text(
                    user?.role == 'teacher'
                        ? 'Your Courses'
                        : 'Enrolled Courses',
                    style: TextStyles.h2,
                  ),
                ),
                Consumer<CourseProvider>(
                  builder: (context, courseProvider, child) {
                    if (courseProvider.error != null) {
                      return Center(
                        child: Text(
                          courseProvider.error!,
                          style: TextStyles.error,
                        ),
                      );
                    }

                    final filteredCourses =
                        _getFilteredCourses(courseProvider.courses);

                    if (filteredCourses.isEmpty) {
                      return Center(
                        child: Padding(
                          padding: const EdgeInsets.all(Dimensions.lg),
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                _searchQuery.isNotEmpty
                                    ? Icons.search_off
                                    : Icons.school_outlined,
                                size: 64,
                                color: AppColors.grey,
                              ),
                              const SizedBox(height: Dimensions.md),
                              Text(
                                _searchQuery.isNotEmpty
                                    ? 'No courses match your search'
                                    : user?.role == 'teacher'
                                        ? 'You haven\'t created any courses yet'
                                        : 'You haven\'t enrolled in any courses yet',
                                style: TextStyles.bodyLarge,
                                textAlign: TextAlign.center,
                              ),
                              if (_searchQuery.isNotEmpty) ...[
                                const SizedBox(height: Dimensions.md),
                                TextButton(
                                  onPressed: () {
                                    setState(() {
                                      _searchQuery = '';
                                    });
                                  },
                                  child: const Text('Clear Search'),
                                ),
                              ],
                            ],
                          ),
                        ),
                      );
                    }

                    return GridView.builder(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      padding: const EdgeInsets.symmetric(
                        horizontal: Dimensions.md,
                        vertical: Dimensions.sm,
                      ),
                      gridDelegate:
                          const SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 2,
                        childAspectRatio: 0.95,
                        crossAxisSpacing: 10,
                        mainAxisSpacing: 10,
                      ),
                      itemCount: filteredCourses.length,
                      itemBuilder: (context, index) {
                        return CourseCard(
                          course: filteredCourses[index],
                          showActiveStatus: true,
                          onTap: () => Navigator.pushNamed(
                            context,
                            AppRoutes.courseDetail,
                            arguments: filteredCourses[index].id,
                          ),
                        );
                      },
                    );
                  },
                ),
                const SizedBox(height: Dimensions.lg),
              ],
            ),
          ),
        ),
      ),
      floatingActionButton: user?.role == 'teacher'
          ? FloatingActionButton(
              onPressed: () => Navigator.pushNamed(context, '/create-course'),
              backgroundColor: AppColors.primary,
              child: const Icon(Icons.add),
            )
          : null,
      bottomNavigationBar: BottomNavigation(
        controller: _tabController,
        currentIndex: _tabController.index,
      ),
    );
  }
}

lib/ui/screens/course/course_detail_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../providers/course_provider.dart';
import '../../../widgets/common/custom_button.dart';
import '../../../widgets/common/gradient_background.dart';
import '../../../widgets/common/loading_overlay.dart';
import '../../../widgets/common/app_bar.dart';
import '../../../widgets/course/course_info_section.dart';
import '../../../data/models/course.dart';
import '../../../ui/screens/modules/module_list_screen.dart';

class CourseDetailScreen extends StatefulWidget {
  final int courseId;

  const CourseDetailScreen({
    Key? key,
    required this.courseId,
  }) : super(key: key);

  @override
  State<CourseDetailScreen> createState() => _CourseDetailScreenState();
}

class _CourseDetailScreenState extends State<CourseDetailScreen> {
  @override
  void initState() {
    super.initState();
    Future.microtask(() => _loadCourseDetail());
  }

  Future<void> _loadCourseDetail() async {
    if (!mounted) return;
    try {
      final courseProvider =
          Provider.of<CourseProvider>(context, listen: false);
      await courseProvider.getCourseDetail(widget.courseId);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(e.toString())),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<CourseProvider>(
      builder: (context, courseProvider, _) {
        final course = courseProvider.selectedCourse;
        final isLoading = courseProvider.isLoading;
        final error = courseProvider.error;

        return Scaffold(
          appBar: CustomAppBar(
            title: course.name.isEmpty ? 'Course Details' : course.name,
            actions: course.id != 0
                ? [
                    PopupMenuButton<String>(
                      icon: const Icon(
                        Icons.more_vert,
                        color: AppColors.white,
                      ),
                      onSelected: (value) async {
                        if (value == 'edit') {
                          // Navigate to edit screen
                        } else if (value == 'delete') {
                          await _showDeleteConfirmation(context, course.id);
                        }
                      },
                      itemBuilder: (context) => [
                        const PopupMenuItem(
                          value: 'edit',
                          child: Text('Edit Course'),
                        ),
                        const PopupMenuItem(
                          value: 'delete',
                          child: Text('Delete Course'),
                        ),
                      ],
                    ),
                  ]
                : null,
          ),
          body: LoadingOverlay(
            isLoading: isLoading,
            child: GradientBackground(
              colors: const [
                AppColors.background,
                AppColors.surface,
              ],
              child: error != null
                  ? _buildErrorState(error)
                  : course.id == 0 && !isLoading
                      ? _buildEmptyState()
                      : _buildContent(course),
            ),
          ),
        );
      },
    );
  }

  Widget _buildErrorState(String error) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(Dimensions.lg),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(
              Icons.error_outline,
              size: 64,
              color: AppColors.error,
            ),
            const SizedBox(height: Dimensions.md),
            Text(
              'Error Loading Course',
              style: TextStyles.h3.copyWith(color: AppColors.error),
            ),
            const SizedBox(height: Dimensions.sm),
            Text(
              error,
              style: TextStyles.bodyMedium,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: Dimensions.lg),
            CustomButton(
              text: 'Retry',
              onPressed: _loadCourseDetail,
              width: 200,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.school_outlined,
            size: 64,
            color: AppColors.grey.withOpacity(0.5),
          ),
          const SizedBox(height: Dimensions.md),
          Text(
            'Course Not Found',
            style: TextStyles.h3.copyWith(color: AppColors.grey),
          ),
        ],
      ),
    );
  }

  Widget _buildContent(Course course) {
    return RefreshIndicator(
      onRefresh: _loadCourseDetail,
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(Dimensions.lg),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Course Image Section
            ClipRRect(
              borderRadius: BorderRadius.circular(Dimensions.sm),
              child: course.imageUrl.isNotEmpty
                  ? Image.network(
                      course.imageUrl,
                      height: 200,
                      width: double.infinity,
                      fit: BoxFit.cover,
                    )
                  : Image.asset(
                      'assets/images/default_course.png',
                      height: 200,
                      width: double.infinity,
                      fit: BoxFit.cover,
                    ),
            ),
            const SizedBox(height: Dimensions.lg),

            // Instructor Info Section
            Row(
              children: [
                const CircleAvatar(
                  backgroundImage: AssetImage('assets/default_profile.png'),
                  radius: 20,
                ),
                const SizedBox(width: Dimensions.sm),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Course by',
                      style: TextStyles.bodySmall,
                    ),
                    Text(
                      course.createdByUsername,
                      style: TextStyles.bodyMedium.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ],
            ),
            const SizedBox(height: Dimensions.xl),

            // Course Overview Section
            Text(
              'Course Overview',
              style: TextStyles.h3.copyWith(
                color: AppColors.primary,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: Dimensions.md),
            Text(
              course.description,
              style: TextStyles.bodyMedium.copyWith(
                color: AppColors.textSecondary,
                height: 1.5,
              ),
            ),
            const SizedBox(height: Dimensions.md),
            Text(
              'Course Code: ${course.courseCode}',
              style: TextStyles.bodyMedium.copyWith(
                color: AppColors.textSecondary,
              ),
            ),

            // Students Count
            const SizedBox(height: Dimensions.md),
            Row(
              children: const [
                Icon(
                  Icons.group_outlined,
                  color: AppColors.textSecondary,
                  size: 20,
                ),
                SizedBox(width: Dimensions.xs),
                Text(
                  'students enrolled',
                  style: TextStyles.bodyMedium,
                ),
              ],
            ),

            const SizedBox(height: Dimensions.xl),

            // Modules Section
            Text(
              'Modules',
              style: TextStyles.h3.copyWith(
                color: AppColors.primary,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: Dimensions.md),

            // Module List
            SizedBox(
              height: 400,
              child: ModuleListScreen(
                courseId: course.id,
                embedded: true,
              ),
            ),

            // Action Buttons for instructor
            if (course.createdByUsername.isNotEmpty) ...[
              const SizedBox(height: Dimensions.xl),
              CustomButton(
                text: 'Add Module',
                onPressed: () {
                  // TODO: Implement add module functionality
                },
                backgroundColor: AppColors.primary,
                width: double.infinity,
              ),
              const SizedBox(height: Dimensions.md),
              Row(
                children: [
                  Expanded(
                    child: CustomButton(
                      text: 'Edit Course',
                      onPressed: () {
                        // TODO: Implement edit course functionality
                      },
                      backgroundColor: AppColors.secondary,
                    ),
                  ),
                  const SizedBox(width: Dimensions.md),
                  Expanded(
                    child: CustomButton(
                      text: 'Delete Course',
                      onPressed: () =>
                          _showDeleteConfirmation(context, course.id),
                      backgroundColor: AppColors.error,
                    ),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  Future<void> _showDeleteConfirmation(
      BuildContext context, int courseId) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Course'),
        content: const Text(
          'Are you sure you want to delete this course? This action cannot be undone.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(
              foregroundColor: AppColors.error,
            ),
            child: const Text('Delete'),
          ),
        ],
      ),
    );

    if (confirmed == true && mounted) {
      try {
        final courseProvider =
            Provider.of<CourseProvider>(context, listen: false);
        await courseProvider.deleteCourse(courseId);
        if (mounted) {
          Navigator.pop(context);
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Course deleted successfully')),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(e.toString())),
          );
        }
      }
    }
  }
}

lib/ui/screens/course/course_list_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../providers/auth_provider.dart';
import '../../../providers/course_provider.dart';
import '../../../widgets/widgets.dart';

class CourseListScreen extends StatefulWidget {
  const CourseListScreen({Key? key}) : super(key: key);

  @override
  _CourseListScreenState createState() => _CourseListScreenState();
}

class _CourseListScreenState extends State<CourseListScreen> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadCourses();
    });
  }

  Future<void> _loadCourses() async {
    final courseProvider = Provider.of<CourseProvider>(context, listen: false);
    await courseProvider.fetchCourses();
  }

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<AuthProvider>(context);
    final isTeacher = authProvider.user?.role == 'teacher';

    return Scaffold(
      appBar: AppBar(
        title: Text(
          isTeacher ? 'My Courses' : 'Available Courses',
          style: TextStyles.h2.copyWith(color: AppColors.white),
        ),
        backgroundColor: AppColors.primary,
      ),
      body: Consumer<CourseProvider>(
        builder: (context, courseProvider, child) {
          return LoadingOverlay(
            isLoading: courseProvider.isLoading,
            child: RefreshIndicator(
              onRefresh: _loadCourses,
              child: courseProvider.error != null
                  ? Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            courseProvider.error!,
                            style: TextStyles.error,
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: Dimensions.md),
                          CustomButton(
                            text: 'Retry',
                            onPressed: _loadCourses,
                            width: 120,
                          ),
                        ],
                      ),
                    )
                  : courseProvider.courses.isEmpty
                      ? Center(
                          child: Text(
                            isTeacher
                                ? 'You haven\'t created any courses yet'
                                : 'No courses available',
                            style: TextStyles.bodyLarge,
                            textAlign: TextAlign.center,
                          ),
                        )
                      : ListView.builder(
                          padding: const EdgeInsets.all(Dimensions.md),
                          itemCount: courseProvider.courses.length,
                          itemBuilder: (context, index) {
                            final course = courseProvider.courses[index];
                            return Padding(
                              padding:
                                  const EdgeInsets.only(bottom: Dimensions.md),
                              child: CourseCard(
                                course: course,
                                onTap: () => Navigator.pushNamed(
                                  context,
                                  '/course-detail',
                                  arguments: course.id,
                                ),
                              ),
                            );
                          },
                        ),
            ),
          );
        },
      ),
      floatingActionButton: isTeacher
          ? FloatingActionButton(
              onPressed: () => Navigator.pushNamed(context, '/create-course'),
              backgroundColor: AppColors.primary,
              child: const Icon(Icons.add),
            )
          : null,
    );
  }
}

lib/ui/screens/module/module_detail_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../providers/module_provider.dart';
import '../../../widgets/common/app_bar.dart';
import '../../../widgets/common/loading_overlay.dart';
import '../../../widgets/module/notes_section.dart';
import '../../../widgets/module/quiz_section.dart';
import '../../../widgets/module/results_section.dart';
import '../../../providers/quiz_provider.dart';

class ModuleDetailScreen extends StatefulWidget {
  final int moduleId;
  final int courseId;

  const ModuleDetailScreen({
    super.key,
    required this.moduleId,
    required this.courseId,
  });

  @override
  State<ModuleDetailScreen> createState() => _ModuleDetailScreenState();
}

class _ModuleDetailScreenState extends State<ModuleDetailScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  int? _quizId;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadModuleDetails();
      _loadQuizDetails();
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadModuleDetails() async {
    final moduleProvider = Provider.of<ModuleProvider>(context, listen: false);
    await moduleProvider.fetchModuleDetails(widget.moduleId);
  }

  Future<void> _loadQuizDetails() async {
    final quizProvider = Provider.of<QuizProvider>(context, listen: false);
    await quizProvider.fetchQuizzes(widget.moduleId);

    if (mounted) {
      setState(() {
        // Get the first quiz ID if available
        _quizId = quizProvider.quizzes.isNotEmpty
            ? quizProvider.quizzes.first.id
            : null;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBar(
        title: 'Module Details',
      ),
      body: Consumer<ModuleProvider>(
        builder: (context, moduleProvider, child) {
          if (moduleProvider.isLoading) {
            return const LoadingOverlay(
              isLoading: true,
              child: SizedBox.expand(),
            );
          }

          if (moduleProvider.error != null) {
            return Center(
              child: Text(
                moduleProvider.error!,
                style: TextStyles.error,
                textAlign: TextAlign.center,
              ),
            );
          }

          final module = moduleProvider.selectedModule;
          if (module == null) {
            return const Center(
              child: Text(
                'Module not found',
                style: TextStyles.bodyLarge,
              ),
            );
          }

          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding: const EdgeInsets.all(Dimensions.md),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(module.title, style: TextStyles.h2),
                    const SizedBox(height: Dimensions.sm),
                    Text(
                      module.description,
                      style: TextStyles.bodyMedium,
                    ),
                  ],
                ),
              ),
              TabBar(
                controller: _tabController,
                labelColor: AppColors.primary,
                unselectedLabelColor: AppColors.grey,
                tabs: const [
                  Tab(text: 'Notes'),
                  Tab(text: 'Quiz'),
                  Tab(text: 'Results'),
                ],
              ),
              Expanded(
                child: TabBarView(
                  controller: _tabController,
                  children: [
                    NotesSection(moduleId: widget.moduleId),
                    QuizSection(moduleId: widget.moduleId),
                    ResultSection(
                      moduleId: widget.moduleId,
                      quizId: _quizId!,
                    ),
                  ],
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}

lib/ui/screens/module/module_list_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../providers/module_provider.dart';
import '../../../widgets/common/app_bar.dart';
import '../../../widgets/common/loading_overlay.dart';
import '../../../widgets/module/module_card.dart';
import '../../../constants/colors.dart';

class ModuleListScreen extends StatefulWidget {
  final int courseId;
  final bool embedded;

  const ModuleListScreen({
    super.key,
    required this.courseId,
    this.embedded = false,
  });

  @override
  State<ModuleListScreen> createState() => _ModuleListScreenState();
}

class _ModuleListScreenState extends State<ModuleListScreen> {
  @override
  void initState() {
    super.initState();
    // Add this to fetch modules when screen initializes
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadModules();
    });
  }

  Future<void> _loadModules() async {
    if (!mounted) return;
    try {
      final moduleProvider =
          Provider.of<ModuleProvider>(context, listen: false);
      await moduleProvider.fetchModules(widget.courseId);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(e.toString())),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    Widget content = Consumer<ModuleProvider>(
      builder: (context, moduleProvider, child) {
        // Add print statement to debug
        print('Modules length: ${moduleProvider.modules.length}');
        print('Loading state: ${moduleProvider.isLoading}');
        print('Error state: ${moduleProvider.error}');

        if (moduleProvider.isLoading) {
          return const LoadingOverlay(
            isLoading: true,
            child: SizedBox.expand(),
          );
        }

        if (moduleProvider.error != null) {
          return Center(
            child: Text(
              moduleProvider.error!,
              style: TextStyles.error,
              textAlign: TextAlign.center,
            ),
          );
        }

        final modules = moduleProvider.modules;
        // print(modules);
        if (modules.isEmpty) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.folder_outlined,
                  size: 48,
                  color: AppColors.textSecondary.withOpacity(0.5),
                ),
                const SizedBox(height: Dimensions.sm),
                Text(
                  'No modules yet',
                  style: TextStyles.bodyMedium.copyWith(
                    color: AppColors.textSecondary,
                  ),
                ),
              ],
            ),
          );
        }

        return ListView.builder(
          padding: const EdgeInsets.symmetric(vertical: Dimensions.md),
          itemCount: modules.length,
          itemBuilder: (context, index) {
            final module = modules[index];
            return Padding(
              padding: const EdgeInsets.only(bottom: Dimensions.md),
              child: ModuleCard(
                module: module,
                onTap: () => Navigator.pushNamed(
                  context,
                  '/module-detail',
                  arguments: {
                    'moduleId': module.id,
                    'courseId': widget.courseId,
                  },
                ),
                isInstructor: false,
              ),
            );
          },
        );
      },
    );

    if (!widget.embedded) {
      content = Scaffold(
        appBar: const CustomAppBar(
          title: 'Course Modules',
        ),
        body: content,
      );
    }

    return content;
  }
}

lib/ui/screens/notes/note_detail_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:app/constants/constants.dart';
import '../../../providers/note_provider.dart';
import 'package:app/widgets/widgets.dart';

class NoteDetailScreen extends StatefulWidget {
  final int moduleId;
  final int? noteId;

  const NoteDetailScreen({
    Key? key,
    required this.moduleId,
    this.noteId,
  }) : super(key: key);

  @override
  _NoteDetailScreenState createState() => _NoteDetailScreenState();
}

class _NoteDetailScreenState extends State<NoteDetailScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _contentController = TextEditingController();
  bool _isEditing = false;

  @override
  void initState() {
    super.initState();
    _isEditing = widget.noteId != null;
    if (_isEditing) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _loadNote();
      });
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _contentController.dispose();
    super.dispose();
  }

  Future<void> _loadNote() async {
    try {
      final noteProvider = Provider.of<NoteProvider>(context, listen: false);
      final note = await noteProvider
          .getNote(widget.noteId!); // Changed from loadNotes to getNote
      setState(() {
        _titleController.text = note.title;
        _contentController.text = note.content;
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(e.toString()),
            backgroundColor: AppColors.error,
          ),
        );
      }
    }
  }

  Future<void> _saveNote() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      final noteProvider = Provider.of<NoteProvider>(context, listen: false);
      if (_isEditing) {
        await noteProvider.updateNote(
          widget.moduleId, // Added moduleId
          widget.noteId!,
          _titleController.text,
          _contentController.text,
        );
      } else {
        await noteProvider.createNote(
          widget.moduleId,
          _titleController.text,
          _contentController.text,
        );
      }
      if (mounted) {
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(e.toString()),
            backgroundColor: AppColors.error,
          ),
        );
      }
    }
  }

  Future<void> _deleteNote() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Note'),
        content: const Text(
          'Are you sure you want to delete this note? This action cannot be undone.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(
              foregroundColor: AppColors.error,
            ),
            child: const Text('Delete'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        final noteProvider = Provider.of<NoteProvider>(context, listen: false);
        await noteProvider.deleteNote(
          widget.moduleId, // Added moduleId
          widget.noteId!,
        );
        if (mounted) {
          Navigator.pop(context);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(e.toString()),
              backgroundColor: AppColors.error,
            ),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          _isEditing ? 'Edit Note' : 'New Note',
          style: TextStyles.h2.copyWith(color: AppColors.white),
        ),
        backgroundColor: AppColors.primary,
        actions: [
          if (_isEditing)
            IconButton(
              icon: const Icon(Icons.delete),
              onPressed: _deleteNote,
            ),
        ],
      ),
      body: Consumer<NoteProvider>(
        builder: (context, noteProvider, child) {
          return LoadingOverlay(
            isLoading: noteProvider.isLoading,
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(Dimensions.md),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    CustomTextField(
                      controller: _titleController,
                      labelText: 'Title',
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter a title';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: Dimensions.md),
                    CustomTextField(
                      controller: _contentController,
                      labelText: 'Content',
                      maxLines: 10,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter some content';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: Dimensions.xl),
                    CustomButton(
                      text: _isEditing ? 'Update Note' : 'Save Note',
                      onPressed: _saveNote,
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}

lib/ui/screens/notes/note_list_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../providers/auth_provider.dart';
import '../../../providers/course_provider.dart';
import '../../../widgets/widgets.dart';

class CourseListScreen extends StatefulWidget {
  const CourseListScreen({Key? key}) : super(key: key);

  @override
  _CourseListScreenState createState() => _CourseListScreenState();
}

class _CourseListScreenState extends State<CourseListScreen> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadCourses();
    });
  }

  Future<void> _loadCourses() async {
    final courseProvider = Provider.of<CourseProvider>(context, listen: false);
    await courseProvider.fetchCourses();
  }

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<AuthProvider>(context);
    final isTeacher = authProvider.user?.role == 'teacher';

    return Scaffold(
      appBar: AppBar(
        title: Text(
          isTeacher ? 'My Courses' : 'Available Courses',
          style: TextStyles.h2.copyWith(color: AppColors.white),
        ),
        backgroundColor: AppColors.primary,
      ),
      body: Consumer<CourseProvider>(
        builder: (context, courseProvider, child) {
          return LoadingOverlay(
            isLoading: courseProvider.isLoading,
            child: RefreshIndicator(
              onRefresh: _loadCourses,
              child: courseProvider.error != null
                  ? Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            courseProvider.error!,
                            style: TextStyles.error,
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: Dimensions.md),
                          CustomButton(
                            text: 'Retry',
                            onPressed: _loadCourses,
                            width: 120,
                          ),
                        ],
                      ),
                    )
                  : courseProvider.courses.isEmpty
                      ? Center(
                          child: Text(
                            isTeacher
                                ? 'You haven\'t created any courses yet'
                                : 'No courses available',
                            style: TextStyles.bodyLarge,
                            textAlign: TextAlign.center,
                          ),
                        )
                      : ListView.builder(
                          padding: const EdgeInsets.all(Dimensions.md),
                          itemCount: courseProvider.courses.length,
                          itemBuilder: (context, index) {
                            final course = courseProvider.courses[index];
                            return Padding(
                              padding:
                                  const EdgeInsets.only(bottom: Dimensions.md),
                              child: CourseCard(
                                course: course,
                                onTap: () => Navigator.pushNamed(
                                  context,
                                  '/course-detail',
                                  arguments: course.id,
                                ),
                              ),
                            );
                          },
                        ),
            ),
          );
        },
      ),
      floatingActionButton: isTeacher
          ? FloatingActionButton(
              onPressed: () => Navigator.pushNamed(context, '/create-course'),
              backgroundColor: AppColors.primary,
              child: const Icon(Icons.add),
            )
          : null,
    );
  }
}

lib/ui/screens/quiz/parsers/quiz_parser.dart
import 'package:app/data/models/parsed_questions.dart';

class QuizController {
  static final QuizController _instance = QuizController._internal();
  factory QuizController() => _instance;
  QuizController._internal();

  // Parse quiz content into structured format for display
  List<ParsedQuestion> parseQuizContent(String content) {
    final lines = content.split('\n');
    final questions = <ParsedQuestion>[];

    ParsedQuestion? currentQuestion;
    List<String> currentOptions = [];

    for (var line in lines) {
      line = line.trim();
      if (line.isEmpty) continue;

      if (RegExp(r'^\d+\.').hasMatch(line)) {
        if (currentQuestion != null) {
          questions.add(currentQuestion);
        }

        final questionText = line.replaceFirst(RegExp(r'^\d+\.\s*'), '');
        currentQuestion = ParsedQuestion(
          text: questionText,
          options: [],
          correctAnswer: '',
        );
        currentOptions = [];
      } else if (RegExp(r'^[A-D]\)').hasMatch(line)) {
        final option = line.substring(3).trim();
        currentOptions.add(option);
      } else if (line.startsWith('Correct Answer:')) {
        final answer = line.split(':')[1].trim();
        if (currentQuestion != null) {
          currentQuestion = currentQuestion.copyWith(
            options: List.from(currentOptions),
            correctAnswer: currentOptions[_letterToIndex(answer)],
          );
        }
      }
    }

    if (currentQuestion != null) {
      questions.add(currentQuestion);
    }

    return questions;
  }

  // Format questions back into quiz content format
  String formatQuizContent(List<ParsedQuestion> questions) {
    final buffer = StringBuffer();

    for (var i = 0; i < questions.length; i++) {
      final q = questions[i];

      buffer.writeln('${i + 1}. ${q.text}');
      buffer.writeln();

      for (var j = 0; j < q.options.length; j++) {
        buffer.writeln('${_indexToLetter(j)}) ${q.options[j]}');
      }

      final correctIndex = q.options.indexOf(q.correctAnswer);
      buffer.writeln('Correct Answer: ${_indexToLetter(correctIndex)}');
      buffer.writeln();
    }

    return buffer.toString().trim();
  }

  // Helper methods
  int _letterToIndex(String letter) {
    return letter.toUpperCase().codeUnitAt(0) - 'A'.codeUnitAt(0);
  }

  String _indexToLetter(int index) {
    return String.fromCharCode('A'.codeUnitAt(0) + index);
  }

  List<String> shuffleOptions(List<String> options) {
    final shuffled = List<String>.from(options);
    shuffled.shuffle();
    return shuffled;
  }

  double calculateProgress(int answered, int total) {
    return answered / total;
  }

  String getProgressMessage(double progress) {
    final percentage = (progress * 100).toStringAsFixed(0);
    return '$percentage% complete';
  }

  String getScoreMessage(double score) {
    if (score >= 90) return 'Excellent! You\'ve mastered this topic!';
    if (score >= 80) return 'Great job! You have a solid understanding!';
    if (score >= 70) return 'Good work! Keep practicing to improve!';
    if (score >= 60) return 'You passed! Review the topics you missed.';
    return 'Keep studying and try again. You can do it!';
  }

  double calculateScore(
      Map<String, String> answers, List<ParsedQuestion> questions) {
    int correct = 0;
    for (var question in questions) {
      if (answers[question.text] == question.correctAnswer) {
        correct++;
      }
    }
    return (correct / questions.length) * 100;
  }
}


import 'package:dio/dio.dart';
import 'api_config.dart';

class QuizApiService {
  final Dio _dio;

  QuizApiService() : _dio = ApiConfig.dio;

  Future<List<dynamic>> fetchQuizzes(int moduleId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/quizzes/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> createQuiz({
    required int moduleId,
    required String title,
    required String description,
    required String content,
    required String quizDuration,
  }) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/quizzes/',
        data: {
          'title': title,
          'description': description,
          'content': content,
          'quiz_duration': quizDuration,
          'module': moduleId,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> getQuizDetail(int moduleId, int quizId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/quizzes/$quizId/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> submitQuizResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/quizzes/$quizId/submit/',
        data: {
          'percentage': percentage,
          'quiz_content': quizContent,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to access quiz content';
      }
      if (e.response!.data is Map) {
        return e.response!.data['detail'] ?? 'An error occurred';
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    return e.message ?? 'Network error occurred';
  }
}

lib/ui/screens/quiz/parsers/quiz_detail_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../providers/quiz_provider.dart';
import '../../../widgets/common/app_bar.dart';
import '../../../widgets/common/loading_overlay.dart';
import '../../../widgets/common/custom_button.dart';
import '../../../widgets/quiz/question_card.dart';
import '../../../widgets/quiz/result_card.dart';
import '../../../widgets/quiz/result_view.dart';
import '../../../ui/controllers/quiz_controller.dart';

class QuizDetailScreen extends StatefulWidget {
  final int moduleId;
  final int quizId;

  const QuizDetailScreen({
    super.key,
    required this.moduleId,
    required this.quizId,
  });

  @override
  State<QuizDetailScreen> createState() => _QuizDetailScreenState();
}

class _QuizDetailScreenState extends State<QuizDetailScreen> {
  final QuizController _quizController = QuizController();
  final Map<int, String> _userAnswers = {};
  bool _isSubmitted = false;
  bool _isReviewing = false;

  @override
  void initState() {
    super.initState();
    _loadQuiz();
  }

  Future<void> _loadQuiz() async {
    final quizProvider = Provider.of<QuizProvider>(context, listen: false);
    await quizProvider.fetchQuizDetails(widget.moduleId, widget.quizId);
  }

  void _handleAnswerSelected(int questionIndex, String answer) {
    setState(() {
      _userAnswers[questionIndex] = answer;
    });
  }

  Future<void> _handleSubmit() async {
    final quizProvider = Provider.of<QuizProvider>(context, listen: false);
    final quiz = quizProvider.selectedQuiz;
    if (quiz == null) return;

    final questions = _quizController.parseQuizContent(quiz.content);
    if (_userAnswers.length != questions.length) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please answer all questions before submitting'),
          backgroundColor: AppColors.error,
        ),
      );
      return;
    }

    try {
      final score = _calculateScore(questions);
      await quizProvider.submitQuizResult(
        moduleId: widget.moduleId,
        quizId: widget.quizId,
        percentage: score.toDouble(),
        quizContent: quiz.content,
      );

      if (mounted) {
        setState(() {
          _isSubmitted = true;
        });
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(e.toString())),
        );
      }
    }
  }

  int _calculateScore(List<ParsedQuestion> questions) {
    int correct = 0;
    for (var i = 0; i < questions.length; i++) {
      if (_userAnswers[i] == questions[i].correctAnswer) {
        correct++;
      }
    }
    return ((correct / questions.length) * 100).round();
  }

  void _handleReviewAnswers() {
    setState(() {
      _isReviewing = true;
    });
  }

  void _handleReturn() {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvoked: (didPop) async {
        final shouldPop = await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('Quit Quiz?'),
            content: const Text(
              'Are you sure you want to quit? Your progress will be lost.',
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(false),
                child: const Text('Cancel'),
              ),
              TextButton(
                onPressed: () => Navigator.of(context).pop(true),
                child: const Text('Quit'),
              ),
            ],
          ),
        );

        if (shouldPop ?? false) {
          if (mounted) {
            Navigator.of(context).pop();
          }
        }
      },
      child: Scaffold(
        appBar: const CustomAppBar(
          title: 'Quiz',
        ),
        body: Consumer<QuizProvider>(
          builder: (context, quizProvider, child) {
            if (quizProvider.isLoading) {
              return const LoadingOverlay(
                isLoading: true,
                child: SizedBox.expand(),
              );
            }

            if (quizProvider.error != null) {
              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      quizProvider.error!,
                      style: TextStyles.error,
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: Dimensions.md),
                    CustomButton(
                      text: 'Retry',
                      onPressed: _loadQuiz,
                      width: 120,
                    ),
                  ],
                ),
              );
            }

            final quiz = quizProvider.selectedQuiz;
            if (quiz == null) {
              return const Center(
                child: Text(
                  'Quiz not found',
                  style: TextStyles.bodyLarge,
                ),
              );
            }

            final questions = _quizController.parseQuizContent(quiz.content);

            if (_isSubmitted) {
              final score = _calculateScore(questions);

              if (_isReviewing) {
                return ListView.builder(
                  padding: const EdgeInsets.all(Dimensions.md),
                  itemCount: questions.length,
                  itemBuilder: (context, index) {
                    final question = questions[index];
                    final userAnswer = _userAnswers[index] ?? '';
                    final isCorrect = question.correctAnswer == userAnswer;

                    return Padding(
                      padding: const EdgeInsets.only(bottom: Dimensions.md),
                      child: ResultCard(
                        question: question,
                        userAnswer: userAnswer,
                        isCorrect: isCorrect,
                      ),
                    );
                  },
                );
              }

              return ResultView(
                correctAnswers: score,
                totalQuestions: questions.length,
                onReviewAnswers: _handleReviewAnswers,
                onReturn: _handleReturn,
              );
            }

            return Column(
              children: [
                Expanded(
                  child: ListView.builder(
                    padding: const EdgeInsets.all(Dimensions.md),
                    itemCount: questions.length,
                    itemBuilder: (context, index) {
                      return Padding(
                        padding: const EdgeInsets.only(bottom: Dimensions.md),
                        child: QuestionCard(
                          question: questions[index],
                          selectedAnswer: _userAnswers[index],
                          onAnswerSelected: (answer) =>
                              _handleAnswerSelected(index, answer),
                        ),
                      );
                    },
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(Dimensions.md),
                  child: CustomButton(
                    text: 'Submit Quiz',
                    onPressed: _handleSubmit,
                    gradient: const LinearGradient(
                      colors: [AppColors.primary, AppColors.primaryDark],
                    ),
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}


lib/ui/screens/quiz/parsers/results_screen.dart

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../providers/quiz_provider.dart';
import '../../../widgets/quiz/result_card.dart';
import '../../../ui/controllers/quiz_controller.dart';

class ResultsScreen extends StatefulWidget {
  final int quizId;
  final int moduleId;
  final double score;
  final List<ParsedQuestion> questions;
  final Map<String, String> answers;

  const ResultsScreen({
    Key? key,
    required this.quizId,
    required this.moduleId,
    required this.score,
    required this.questions,
    required this.answers,
  }) : super(key: key);

  @override
  State<ResultsScreen> createState() => _ResultsScreenState();
}

class _ResultsScreenState extends State<ResultsScreen> {
  final QuizController _quizController = QuizController();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadResults();
    });
  }

  Future<void> _loadResults() async {
    final quizProvider = Provider.of<QuizProvider>(context, listen: false);
    await quizProvider.fetchQuizDetails(widget.moduleId, widget.quizId);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Quiz Results',
          style: TextStyles.h2.copyWith(color: AppColors.white),
        ),
        backgroundColor: AppColors.primary,
        automaticallyImplyLeading: false,
      ),
      body: Consumer<QuizProvider>(
        builder: (context, quizProvider, child) {
          if (quizProvider.error != null) {
            return Center(
              child: Text(
                quizProvider.error!,
                style: TextStyles.error,
                textAlign: TextAlign.center,
              ),
            );
          }

          final quiz = quizProvider.selectedQuiz;
          if (quiz == null) {
            return const Center(child: CircularProgressIndicator());
          }

          return SingleChildScrollView(
            padding: const EdgeInsets.all(Dimensions.md),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Container(
                  padding: const EdgeInsets.all(Dimensions.lg),
                  decoration: BoxDecoration(
                    color: AppColors.primary.withOpacity(0.1),
                    borderRadius:
                        BorderRadius.circular(Dimensions.borderRadiusMd),
                  ),
                  child: Column(
                    children: [
                      Text(
                        'Your Score',
                        style: TextStyles.h3,
                      ),
                      const SizedBox(height: Dimensions.md),
                      Text(
                        '${widget.score.toStringAsFixed(1)}%',
                        style: TextStyles.h1.copyWith(
                          color: AppColors.primary,
                        ),
                      ),
                      const SizedBox(height: Dimensions.md),
                      Text(
                        _quizController.getScoreMessage(widget.score),
                        style: TextStyles.bodyLarge,
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: Dimensions.xl),
                Text(
                  'Detailed Results',
                  style: TextStyles.h3,
                ),
                const SizedBox(height: Dimensions.md),
                ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: widget.questions.length,
                  itemBuilder: (context, index) {
                    final question = widget.questions[index];
                    final userAnswer = widget.answers[question.text] ?? '';
                    final isCorrect = userAnswer == question.correctAnswer;

                    return Padding(
                      padding: const EdgeInsets.only(bottom: Dimensions.md),
                      child: ResultCard(
                        question: question,
                        userAnswer: userAnswer,
                        isCorrect: isCorrect,
                      ),
                    );
                  },
                ),
                const SizedBox(height: Dimensions.xl),
                ElevatedButton(
                  onPressed: () =>
                      Navigator.of(context).popUntil((route) => route.isFirst),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppColors.primary,
                    minimumSize: const Size(double.infinity, 48),
                  ),
                  child: const Text('Return to Home'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}


lib/widgets/common/app_bar.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:app/constants/constants.dart';
import 'package:app/providers/auth_provider.dart';

class CustomAppBar extends StatelessWidget implements PreferredSizeWidget {
  final String title;
  final bool showBackButton;
  final List<Widget>? actions;
  final Function(String)? onSearchChanged;
  final bool showSearch;

  const CustomAppBar({
    Key? key,
    required this.title,
    this.showBackButton = true,
    this.actions,
    this.onSearchChanged,
    this.showSearch = false,
  }) : super(key: key);

  bool get _isHome => !showBackButton;

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<AuthProvider>(context);
    final user = authProvider.user;
    final baseUrl = 'http://10.0.2.2:8000/'; // Move this to constants

    return Container(
      padding: EdgeInsets.only(top: MediaQuery.of(context).padding.top),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [
            AppColors.primary,
            AppColors.primaryLight,
          ],
        ),
        borderRadius: const BorderRadius.vertical(
          bottom: Radius.circular(20),
        ),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadow,
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                if (showBackButton)
                  IconButton(
                    icon: const Icon(Icons.arrow_back),
                    color: AppColors.white,
                    onPressed: () => Navigator.pop(context),
                  )
                else if (user?.imageUrl != null)
                  GestureDetector(
                    onTap: () => Navigator.pushNamed(context, '/profile'),
                    child: CircleAvatar(
                      radius: 20,
                      backgroundImage: NetworkImage(
                        baseUrl + user!.imageUrl!,
                      ),
                      onBackgroundImageError: (_, __) {
                        // Using errorBuilder pattern instead
                        return;
                      },
                      child: user.imageUrl == null
                          ? const Image(
                              image: AssetImage(
                                  'assets/icons/default_profile.png'),
                              fit: BoxFit.cover,
                            )
                          : null,
                    ),
                  ),
                Expanded(
                  child: Padding(
                    padding: EdgeInsets.only(
                      left: showBackButton ? 0 : 16,
                    ),
                    child: Column(
                      crossAxisAlignment: showBackButton
                          ? CrossAxisAlignment.center
                          : CrossAxisAlignment.start,
                      children: [
                        if (_isHome && user != null)
                          Text(
                            'Hello ${user.username}',
                            style: TextStyles.bodySmall.copyWith(
                              color: AppColors.white.withOpacity(0.8),
                            ),
                          ),
                        Text(
                          _isHome ? 'Welcome back!' : title,
                          style: TextStyles.h2.copyWith(
                            color: AppColors.white,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                ...(actions ??
                    [
                      IconButton(
                        icon: const Icon(Icons.notifications_outlined),
                        color: AppColors.white,
                        onPressed: () => Navigator.pushNamed(
                          context,
                          '/notifications',
                        ),
                      ),
                      IconButton(
                        icon: const Icon(Icons.person_outline),
                        color: AppColors.white,
                        onPressed: () => Navigator.pushNamed(
                          context,
                          '/profile',
                        ),
                      ),
                    ]),
              ],
            ),
          ),
          if (showSearch)
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
              child: _SearchBar(onSearchChanged: onSearchChanged),
            ),
        ],
      ),
    );
  }

  @override
  Size get preferredSize => Size.fromHeight(showSearch
      ? 160
      : showBackButton
          ? 100
          : 120);
}

class _SearchBar extends StatelessWidget {
  final Function(String)? onSearchChanged;

  const _SearchBar({
    Key? key,
    this.onSearchChanged,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(30),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadow.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextField(
        onChanged: onSearchChanged,
        decoration: InputDecoration(
          hintText: 'Search courses...',
          hintStyle: TextStyles.bodySmall.copyWith(
            color: AppColors.grey,
          ),
          suffixIcon: const Icon(Icons.search, color: AppColors.grey),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.all(16),
        ),
      ),
    );
  }
}


lib/widgets/common/bottom_navigation.dart
import 'package:dio/dio.dart';
import 'api_config.dart';

class QuizApiService {
  final Dio _dio;

  QuizApiService() : _dio = ApiConfig.dio;

  Future<List<dynamic>> fetchQuizzes(int moduleId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/quizzes/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> createQuiz({
    required int moduleId,
    required String title,
    required String description,
    required String content,
    required String quizDuration,
  }) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/quizzes/',
        data: {
          'title': title,
          'description': description,
          'content': content,
          'quiz_duration': quizDuration,
          'module': moduleId,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> getQuizDetail(int moduleId, int quizId) async {
    try {
      final response = await _dio.get('/modules/$moduleId/quizzes/$quizId/');
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  Future<Map<String, dynamic>> submitQuizResult({
    required int moduleId,
    required int quizId,
    required double percentage,
    required String quizContent,
  }) async {
    try {
      final response = await _dio.post(
        '/modules/$moduleId/quizzes/$quizId/submit/',
        data: {
          'percentage': percentage,
          'quiz_content': quizContent,
        },
      );
      return response.data;
    } on DioException catch (e) {
      throw _handleError(e);
    }
  }

  String _handleError(DioException e) {
    if (e.response != null) {
      if (e.response!.statusCode == 401) {
        return 'Please login to access quiz content';
      }
      if (e.response!.data is Map) {
        return e.response!.data['detail'] ?? 'An error occurred';
      }
      return e.response!.statusMessage ?? 'An error occurred';
    }
    return e.message ?? 'Network error occurred';
  }
}


lib/widgets/common/custom_button.dart
import 'package:flutter/material.dart';
import '../../constants/colors.dart';
import '../../constants/dimensions.dart';
import '../../constants/text_styles.dart';

class CustomButton extends StatelessWidget {
  final String text;
  final VoidCallback onPressed;
  final Color? backgroundColor;
  final Color? textColor;
  final Color? borderColor;
  final bool isOutlined;
  final bool isLoading;
  final bool isDisabled; // Added isDisabled property
  final double? width;
  final IconData? icon;
  final Gradient? gradient;

  const CustomButton({
    Key? key,
    required this.text,
    required this.onPressed,
    this.backgroundColor,
    this.textColor,
    this.borderColor,
    this.isOutlined = false,
    this.isLoading = false,
    this.isDisabled = false, // Added default value
    this.width,
    this.icon,
    this.gradient,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: width,
      constraints: BoxConstraints(
        minWidth: 88.0,
        maxWidth: width ?? double.infinity,
      ),
      height: 48.0,
      child: isOutlined ? _buildOutlinedButton() : _buildElevatedButton(),
    );
  }

  Widget _buildElevatedButton() {
    if (gradient != null) {
      return Container(
        decoration: BoxDecoration(
          gradient:
              isDisabled ? null : gradient, // Don't show gradient if disabled
          color: isDisabled
              ? AppColors.grey.withOpacity(0.3)
              : null, // Show grey if disabled
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
          boxShadow: isDisabled
              ? []
              : [
                  // No shadow if disabled
                  BoxShadow(
                    color: AppColors.shadow.withOpacity(0.1),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  ),
                ],
        ),
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            onTap: (isLoading || isDisabled) ? null : onPressed,
            borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
            child: Center(child: _buildButtonContent()),
          ),
        ),
      );
    }

    return ElevatedButton(
      onPressed: (isLoading || isDisabled) ? null : onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: isDisabled
            ? AppColors.grey.withOpacity(0.3)
            : backgroundColor ?? AppColors.primary,
        foregroundColor:
            isDisabled ? AppColors.grey : textColor ?? AppColors.white,
        elevation: isDisabled ? 0 : 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        ),
        padding: EdgeInsets.symmetric(
          horizontal: width != null ? Dimensions.md : Dimensions.lg,
        ),
      ),
      child: _buildButtonContent(),
    );
  }

  Widget _buildOutlinedButton() {
    return OutlinedButton(
      onPressed: (isLoading || isDisabled) ? null : onPressed,
      style: OutlinedButton.styleFrom(
        foregroundColor:
            isDisabled ? AppColors.grey : textColor ?? AppColors.primary,
        side: BorderSide(
          color: isDisabled
              ? AppColors.grey.withOpacity(0.3)
              : borderColor ?? backgroundColor ?? AppColors.primary,
          width: 1.5,
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        ),
        padding: EdgeInsets.symmetric(
          horizontal: width != null ? Dimensions.md : Dimensions.lg,
        ),
      ),
      child: _buildButtonContent(),
    );
  }

  Widget _buildButtonContent() {
    if (isLoading) {
      return SizedBox(
        height: 24.0,
        width: 24.0,
        child: CircularProgressIndicator(
          strokeWidth: 2,
          valueColor: AlwaysStoppedAnimation<Color>(
            isDisabled
                ? AppColors.grey
                : textColor ??
                    (isOutlined ? AppColors.primary : AppColors.white),
          ),
        ),
      );
    }

    return Row(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        if (icon != null) ...[
          Icon(
            icon,
            size: 24.0,
            color: isDisabled
                ? AppColors.grey
                : textColor ??
                    (isOutlined ? AppColors.primary : AppColors.white),
          ),
          const SizedBox(width: 8.0),
        ],
        Text(
          text,
          style: TextStyle(
            color: isDisabled
                ? AppColors.grey
                : textColor ??
                    (isOutlined ? AppColors.primary : AppColors.white),
            fontSize: 16.0,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }
}

lib/widgets/common/custom_button.dart
import 'package:flutter/material.dart';
import '../../constants/colors.dart';
import '../../constants/dimensions.dart';
import '../../constants/text_styles.dart';

class CustomButton extends StatelessWidget {
  final String text;
  final VoidCallback onPressed;
  final Color? backgroundColor;
  final Color? textColor;
  final Color? borderColor;
  final bool isOutlined;
  final bool isLoading;
  final bool isDisabled; // Added isDisabled property
  final double? width;
  final IconData? icon;
  final Gradient? gradient;

  const CustomButton({
    Key? key,
    required this.text,
    required this.onPressed,
    this.backgroundColor,
    this.textColor,
    this.borderColor,
    this.isOutlined = false,
    this.isLoading = false,
    this.isDisabled = false, // Added default value
    this.width,
    this.icon,
    this.gradient,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: width,
      constraints: BoxConstraints(
        minWidth: 88.0,
        maxWidth: width ?? double.infinity,
      ),
      height: 48.0,
      child: isOutlined ? _buildOutlinedButton() : _buildElevatedButton(),
    );
  }

  Widget _buildElevatedButton() {
    if (gradient != null) {
      return Container(
        decoration: BoxDecoration(
          gradient:
              isDisabled ? null : gradient, // Don't show gradient if disabled
          color: isDisabled
              ? AppColors.grey.withOpacity(0.3)
              : null, // Show grey if disabled
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
          boxShadow: isDisabled
              ? []
              : [
                  // No shadow if disabled
                  BoxShadow(
                    color: AppColors.shadow.withOpacity(0.1),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  ),
                ],
        ),
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            onTap: (isLoading || isDisabled) ? null : onPressed,
            borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
            child: Center(child: _buildButtonContent()),
          ),
        ),
      );
    }

    return ElevatedButton(
      onPressed: (isLoading || isDisabled) ? null : onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: isDisabled
            ? AppColors.grey.withOpacity(0.3)
            : backgroundColor ?? AppColors.primary,
        foregroundColor:
            isDisabled ? AppColors.grey : textColor ?? AppColors.white,
        elevation: isDisabled ? 0 : 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        ),
        padding: EdgeInsets.symmetric(
          horizontal: width != null ? Dimensions.md : Dimensions.lg,
        ),
      ),
      child: _buildButtonContent(),
    );
  }

  Widget _buildOutlinedButton() {
    return OutlinedButton(
      onPressed: (isLoading || isDisabled) ? null : onPressed,
      style: OutlinedButton.styleFrom(
        foregroundColor:
            isDisabled ? AppColors.grey : textColor ?? AppColors.primary,
        side: BorderSide(
          color: isDisabled
              ? AppColors.grey.withOpacity(0.3)
              : borderColor ?? backgroundColor ?? AppColors.primary,
          width: 1.5,
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        ),
        padding: EdgeInsets.symmetric(
          horizontal: width != null ? Dimensions.md : Dimensions.lg,
        ),
      ),
      child: _buildButtonContent(),
    );
  }

  Widget _buildButtonContent() {
    if (isLoading) {
      return SizedBox(
        height: 24.0,
        width: 24.0,
        child: CircularProgressIndicator(
          strokeWidth: 2,
          valueColor: AlwaysStoppedAnimation<Color>(
            isDisabled
                ? AppColors.grey
                : textColor ??
                    (isOutlined ? AppColors.primary : AppColors.white),
          ),
        ),
      );
    }

    return Row(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        if (icon != null) ...[
          Icon(
            icon,
            size: 24.0,
            color: isDisabled
                ? AppColors.grey
                : textColor ??
                    (isOutlined ? AppColors.primary : AppColors.white),
          ),
          const SizedBox(width: 8.0),
        ],
        Text(
          text,
          style: TextStyle(
            color: isDisabled
                ? AppColors.grey
                : textColor ??
                    (isOutlined ? AppColors.primary : AppColors.white),
            fontSize: 16.0,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }
}

lib/widgets/common/custom_text_field.dart
import 'package:flutter/material.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';

class CustomTextField extends StatelessWidget {
  final TextEditingController controller;
  final String labelText;
  final IconData? prefixIcon;
  final Widget? suffixIcon;
  final bool obscureText;
  final String? Function(String?)? validator;
  final TextInputType? keyboardType;
  final bool enabled;
  final int? maxLines;
  final TextInputAction? textInputAction;
  final void Function(String)? onSubmitted;

  const CustomTextField({
    Key? key,
    required this.controller,
    required this.labelText,
    this.prefixIcon,
    this.suffixIcon,
    this.obscureText = false,
    this.validator,
    this.keyboardType,
    this.enabled = true,
    this.maxLines = 1,
    this.textInputAction,
    this.onSubmitted,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      controller: controller,
      obscureText: obscureText,
      validator: validator,
      keyboardType: keyboardType,
      enabled: enabled,
      maxLines: maxLines,
      textInputAction: textInputAction,
      onFieldSubmitted: onSubmitted,
      style: TextStyles.bodyMedium,
      decoration: InputDecoration(
        labelText: labelText,
        labelStyle: TextStyles.bodyMedium.copyWith(
          color: AppColors.grey,
        ),
        prefixIcon: prefixIcon != null
            ? Icon(
                prefixIcon,
                color: AppColors.grey,
              )
            : null,
        suffixIcon: suffixIcon,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.sm),
          borderSide: const BorderSide(
            color: AppColors.grey,
            width: 1.0,
          ),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.sm),
          borderSide: const BorderSide(
            color: AppColors.grey,
            width: 1.0,
          ),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.sm),
          borderSide: const BorderSide(
            color: AppColors.primary,
            width: 2.0,
          ),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.sm),
          borderSide: const BorderSide(
            color: AppColors.error,
            width: 1.0,
          ),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(Dimensions.sm),
          borderSide: const BorderSide(
            color: AppColors.error,
            width: 2.0,
          ),
        ),
        filled: true,
        fillColor: enabled ? Colors.white : AppColors.lightGrey,
      ),
    );
  }
}

lib/widgets/common/gradient_background.dart

import 'package:flutter/material.dart';
import '../../../constants/colors.dart';

class GradientBackground extends StatelessWidget {
  final Widget child;
  final List<Color>? colors;

  const GradientBackground({
    Key? key,
    required this.child,
    this.colors,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: colors ??
              [
                AppColors.primary,
                AppColors.primaryDark,
              ],
        ),
      ),
      child: child,
    );
  }
}

lib/widgets/common/loading_overlay.dart
import 'package:flutter/material.dart';
import '../../../constants/colors.dart';

class LoadingOverlay extends StatelessWidget {
  final bool isLoading;
  final Widget child;
  final Color? color;

  const LoadingOverlay({
    Key? key,
    required this.isLoading,
    required this.child,
    this.color,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        child,
        if (isLoading)
          Container(
            color: (color ?? Colors.black).withOpacity(0.5),
            child: const Center(
              child: CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(AppColors.primary),
              ),
            ),
          ),
      ],
    );
  }
}

lib/widgets/course/course_info_section.dart
import 'package:flutter/material.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../data/models/course.dart';

class CourseInfoSection extends StatelessWidget {
  final Course course;

  const CourseInfoSection({
    Key? key,
    required this.course,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(Dimensions.md),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            course.name,
            style: TextStyles.h2,
          ),
          const SizedBox(height: Dimensions.sm),
          Text(
            course.description,
            style: TextStyles.bodyMedium,
          ),
          const SizedBox(height: Dimensions.md),
          Row(
            children: [
              const Icon(
                Icons.person_outline,
                size: Dimensions.iconSm,
                color: AppColors.grey,
              ),
              const SizedBox(width: Dimensions.xs),
              Text(
                'Instructor: ${course.createdByUsername}',
                style: TextStyles.caption.copyWith(
                  color: AppColors.grey,
                ),
              ),
            ],
          ),
          const SizedBox(height: Dimensions.sm),
          Row(
            children: [
              const Icon(
                Icons.code,
                size: Dimensions.iconSm,
                color: AppColors.grey,
              ),
              const SizedBox(width: Dimensions.xs),
              Text(
                'Course Code: ${course.courseCode}',
                style: TextStyles.caption.copyWith(
                  color: AppColors.grey,
                ),
              ),
            ],
          ),
          const SizedBox(height: Dimensions.sm),
          Row(
            children: [
              const Icon(
                Icons.people_outline,
                size: Dimensions.iconSm,
                color: AppColors.grey,
              ),
              const SizedBox(width: Dimensions.xs),
              Text(
                '${course.students.length} students enrolled',
                style: TextStyles.caption.copyWith(
                  color: AppColors.grey,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}





lib/widgets/home/stats_card.dart

import 'package:flutter/material.dart';
import '../../constants/colors.dart';
import '../../constants/dimensions.dart';
import '../../constants/text_styles.dart';

class StatsCard extends StatelessWidget {
  final String title;
  final String value;
  final IconData icon;
  final Gradient? gradient; // Add gradient parameter

  const StatsCard({
    Key? key,
    required this.title,
    required this.value,
    required this.icon,
    this.gradient,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(Dimensions.md),
      decoration: BoxDecoration(
        gradient: gradient,
        color: gradient == null ? AppColors.white : null,
        borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadow.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            icon,
            size: 32,
            color: gradient != null ? AppColors.white : AppColors.primary,
          ),
          const SizedBox(height: Dimensions.sm),
          Text(
            value,
            style: TextStyles.h2.copyWith(
              color: gradient != null ? AppColors.white : AppColors.textPrimary,
            ),
          ),
          Text(
            title,
            style: TextStyles.caption.copyWith(
              color: gradient != null
                  ? AppColors.white.withOpacity(0.8)
                  : AppColors.textSecondary,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}


lib/widgets/home/welcome_banner.dart
import 'package:flutter/material.dart';
import '../../constants/colors.dart';
import '../../constants/dimensions.dart';
import '../../constants/text_styles.dart';

class WelcomeBanner extends StatelessWidget {
  final String username;
  final String role;

  const WelcomeBanner({
    Key? key,
    required this.username,
    required this.role,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(Dimensions.lg),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            AppColors.primary,
            AppColors.primary.withOpacity(0.8),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Welcome back,',
            style: TextStyles.bodyLarge.copyWith(
              color: AppColors.white,
            ),
          ),
          const SizedBox(height: Dimensions.xs),
          Text(
            username,
            style: TextStyles.h1.copyWith(
              color: AppColors.white,
            ),
          ),
          Text(
            role.toUpperCase(),
            style: TextStyles.caption.copyWith(
              color: AppColors.white.withOpacity(0.8),
            ),
          ),
        ],
      ),
    );
  }
}

lib/widgets/module/module_card.dart
import 'package:flutter/material.dart';
import '../../constants/colors.dart';
import '../../constants/dimensions.dart';
import '../../constants/text_styles.dart';
import '../../data/models/module.dart';

class ModuleCard extends StatelessWidget {
  final Module module;
  final VoidCallback onTap;
  final bool isInstructor;

  const ModuleCard({
    super.key,
    required this.module,
    required this.onTap,
    this.isInstructor = false,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: Dimensions.cardElevation,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        child: Padding(
          padding: const EdgeInsets.all(Dimensions.md),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  const Icon(
                    Icons.folder_outlined,
                    color: AppColors.primary,
                    size: Dimensions.iconMd,
                  ),
                  const SizedBox(width: Dimensions.sm),
                  Expanded(
                    child: Text(
                      module.title,
                      style: TextStyles.h3,
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  if (isInstructor)
                    PopupMenuButton<String>(
                      icon: const Icon(Icons.more_vert),
                      onSelected: (value) {
                        // Handle edit/delete actions
                      },
                      itemBuilder: (context) => [
                        const PopupMenuItem(
                          value: 'edit',
                          child: Text('Edit Module'),
                        ),
                        const PopupMenuItem(
                          value: 'delete',
                          child: Text('Delete Module'),
                        ),
                      ],
                    ),
                ],
              ),
              if (module.description.isNotEmpty) ...[
                const SizedBox(height: Dimensions.sm),
                Text(
                  module.description,
                  style: TextStyles.bodySmall,
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}

lib/widgets/module/module_list_section.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:app/constants/constants.dart';
import '../../../providers/auth_provider.dart';
import '../../../providers/module_provider.dart';
import '../common/custom_button.dart';
import '../common/loading_overlay.dart';

class ModuleListSection extends StatefulWidget {
  final int courseId;

  const ModuleListSection({
    Key? key,
    required this.courseId,
  }) : super(key: key);

  @override
  _ModuleListSectionState createState() => _ModuleListSectionState();
}

class _ModuleListSectionState extends State<ModuleListSection> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadModules();
    });
  }

  Future<void> _loadModules() async {
    final moduleProvider = Provider.of<ModuleProvider>(context, listen: false);
    await moduleProvider.fetchModules(widget.courseId);
  }

  @override
  Widget build(BuildContext context) {
    final isTeacher =
        Provider.of<AuthProvider>(context).user?.role == 'teacher';

    return Consumer<ModuleProvider>(
      builder: (context, moduleProvider, child) {
        return Padding(
          padding: const EdgeInsets.all(Dimensions.md),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Modules',
                    style: TextStyles.h3,
                  ),
                  if (isTeacher)
                    CustomButton(
                      text: 'Add Module',
                      onPressed: () => Navigator.pushNamed(
                        context,
                        '/create-module',
                        arguments: widget.courseId,
                      ),
                      icon: Icons.add,
                    ),
                ],
              ),
              const SizedBox(height: Dimensions.md),
              LoadingOverlay(
                isLoading: moduleProvider.isLoading,
                child: moduleProvider.error != null
                    ? Center(
                        child: Column(
                          children: [
                            Text(
                              moduleProvider.error!,
                              style: TextStyles.error,
                              textAlign: TextAlign.center,
                            ),
                            const SizedBox(height: Dimensions.md),
                            CustomButton(
                              text: 'Retry',
                              onPressed: _loadModules,
                              width: 120,
                            ),
                          ],
                        ),
                      )
                    : moduleProvider.modules.isEmpty
                        ? const Center(
                            child: Text(
                              'No modules available',
                              style: TextStyles.bodyMedium,
                            ),
                          )
                        : ListView.builder(
                            shrinkWrap: true,
                            physics: const NeverScrollableScrollPhysics(),
                            itemCount: moduleProvider.modules.length,
                            itemBuilder: (context, index) {
                              final module = moduleProvider.modules[index];
                              return Card(
                                margin: const EdgeInsets.only(
                                  bottom: Dimensions.sm,
                                ),
                                child: ListTile(
                                  title: Text(module.title),
                                  subtitle: Text(
                                    module.description,
                                    maxLines: 2,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  trailing: const Icon(Icons.chevron_right),
                                  onTap: () => Navigator.pushNamed(
                                    context,
                                    '/module-detail',
                                    arguments: module.id,
                                  ),
                                ),
                              );
                            },
                          ),
              ),
            ],
          ),
        );
      },
    );
  }
}

lib/widgets/module/notes_section.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../constants/colors.dart';
import '../../constants/dimensions.dart';
import '../../constants/text_styles.dart';
import '../../providers/auth_provider.dart';
import '../../providers/note_provider.dart';
import '../../data/models/note.dart';
import '../common/loading_overlay.dart';
import '../common/custom_button.dart';
import 'package:flutter_markdown/flutter_markdown.dart';

class NotesSection extends StatefulWidget {
  final int moduleId;

  const NotesSection({
    super.key,
    required this.moduleId,
  });

  @override
  State<NotesSection> createState() => _NotesSectionState();
}

class _NotesSectionState extends State<NotesSection> {
  @override
  void initState() {
    super.initState();
    _loadNotes();
  }

  Future<void> _loadNotes() async {
    if (!mounted) return;
    final notesProvider = Provider.of<NoteProvider>(context, listen: false);
    await notesProvider.loadNotes(widget.moduleId);
  }

  @override
  Widget build(BuildContext context) {
    final isTeacher =
        Provider.of<AuthProvider>(context).user?.role == 'teacher';

    return Consumer<NoteProvider>(
      builder: (context, notesProvider, child) {
        if (notesProvider.isLoading) {
          return const LoadingOverlay(
            isLoading: true,
            child: SizedBox.expand(),
          );
        }

        if (notesProvider.error != null) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'Error loading notes',
                  style: TextStyles.h3.copyWith(color: AppColors.error),
                ),
                const SizedBox(height: Dimensions.sm),
                Text(
                  notesProvider.error!,
                  style: TextStyles.bodyMedium,
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: Dimensions.md),
                CustomButton(
                  text: 'Retry',
                  onPressed: _loadNotes,
                ),
              ],
            ),
          );
        }

        return Padding(
          padding: const EdgeInsets.all(Dimensions.md),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (isTeacher)
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    CustomButton(
                      text: 'Create Note',
                      onPressed: () => Navigator.pushNamed(
                        context,
                        '/create-note',
                        arguments: widget.moduleId,
                      ),
                      icon: Icons.add,
                    ),
                  ],
                ),
              const SizedBox(height: Dimensions.md),
              Expanded(
                child: notesProvider.notes.isEmpty
                    ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.note,
                              size: Dimensions.iconLg,
                              color: AppColors.grey,
                            ),
                            const SizedBox(height: Dimensions.md),
                            Text(
                              'No notes available',
                              style: TextStyles.h3,
                            ),
                            const SizedBox(height: Dimensions.sm),
                            Text(
                              isTeacher
                                  ? 'Create your first note'
                                  : 'Notes will appear here once your instructor creates them',
                              style: TextStyles.bodyMedium,
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      )
                    : ListView.builder(
                        itemCount: notesProvider.notes.length,
                        itemBuilder: (context, index) {
                          final note = notesProvider.notes[index];
                          return Card(
                            margin:
                                const EdgeInsets.only(bottom: Dimensions.sm),
                            child: ListTile(
                              leading: const Icon(
                                Icons.note,
                                color: AppColors.primary,
                                size: Dimensions.iconMd,
                              ),
                              title: Text(
                                note.title,
                                style: TextStyles.bodyLarge,
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                              subtitle: Text(
                                note.content,
                                style: TextStyles.bodySmall,
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                              ),
                              trailing: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  if (isTeacher) ...[
                                    IconButton(
                                      icon: const Icon(Icons.edit),
                                      color: AppColors.primary,
                                      onPressed: () => Navigator.pushNamed(
                                        context,
                                        '/edit-note',
                                        arguments: {
                                          'moduleId': widget.moduleId,
                                          'noteId': note.id,
                                        },
                                      ),
                                    ),
                                    IconButton(
                                      icon: const Icon(Icons.delete),
                                      color: AppColors.error,
                                      onPressed: () =>
                                          _showDeleteConfirmation(note),
                                    ),
                                  ],
                                  CustomButton(
                                    text: 'View',
                                    onPressed: () => _showNoteContent(note),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      ),
              ),
            ],
          ),
        );
      },
    );
  }

  void _showDeleteConfirmation(Note note) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(
          'Delete Note',
          style: TextStyles.h3,
        ),
        content: Text(
          'Are you sure you want to delete this note?',
          style: TextStyles.bodyMedium,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Cancel',
              style: TextStyles.button.copyWith(color: AppColors.grey),
            ),
          ),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              try {
                final notesProvider =
                    Provider.of<NoteProvider>(context, listen: false);
                await notesProvider.deleteNote(widget.moduleId, note.id);
                if (!mounted) return;
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      'Note deleted successfully',
                      style: TextStyles.bodyMedium.copyWith(
                        color: AppColors.white,
                      ),
                    ),
                    backgroundColor: AppColors.success,
                  ),
                );
              } catch (e) {
                if (!mounted) return;
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      'Failed to delete note: $e',
                      style: TextStyles.bodyMedium.copyWith(
                        color: AppColors.white,
                      ),
                    ),
                    backgroundColor: AppColors.error,
                  ),
                );
              }
            },
            child: Text(
              'Delete',
              style: TextStyles.button.copyWith(color: AppColors.error),
            ),
          ),
        ],
      ),
    );
  }

  void _showNoteContent(Note note) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        child: Container(
          constraints: const BoxConstraints(
            maxWidth: 600,
            maxHeight: 800,
          ),
          padding: const EdgeInsets.all(Dimensions.md),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      note.title,
                      style: TextStyles.h3,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.pop(context),
                    color: AppColors.grey,
                  ),
                ],
              ),
              const Divider(),
              const SizedBox(height: Dimensions.sm),
              Expanded(
                child: SingleChildScrollView(
                  child: MarkdownBody(
                    data: note.content,
                    styleSheet: MarkdownStyleSheet(
                      p: TextStyles.bodyMedium,
                      h1: TextStyles.h1,
                      h2: TextStyles.h2,
                      h3: TextStyles.h3,
                      listBullet: TextStyles.bodyMedium,
                      blockquote: TextStyles.bodyMedium.copyWith(
                        color: AppColors.textSecondary,
                        fontStyle: FontStyle.italic,
                      ),
                      code: TextStyles.bodyMedium.copyWith(
                        fontFamily: 'monospace',
                        backgroundColor: AppColors.lightGrey,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

lib/widgets/module/quiz_section.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../constants/colors.dart';
import '../../constants/dimensions.dart';
import '../../constants/text_styles.dart';
import '../../providers/auth_provider.dart';
import '../../providers/quiz_provider.dart';
import '../common/loading_overlay.dart';
import '../common/custom_button.dart';

class QuizSection extends StatefulWidget {
  final int moduleId;

  const QuizSection({
    super.key,
    required this.moduleId,
  });

  @override
  State<QuizSection> createState() => _QuizSectionState();
}

class _QuizSectionState extends State<QuizSection> {
  @override
  void initState() {
    super.initState();
    _loadQuizzes();
  }

  Future<void> _loadQuizzes() async {
    final quizProvider = Provider.of<QuizProvider>(context, listen: false);
    await quizProvider.fetchQuizzes(widget.moduleId);
  }

  @override
  Widget build(BuildContext context) {
    final isTeacher =
        Provider.of<AuthProvider>(context).user?.role == 'teacher';

    return Consumer<QuizProvider>(
      builder: (context, quizProvider, child) {
        if (quizProvider.isLoading) {
          return const LoadingOverlay(
            isLoading: true,
            child: SizedBox.expand(),
          );
        }

        return Padding(
          padding: const EdgeInsets.all(Dimensions.md),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (isTeacher)
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    CustomButton(
                      text: 'Create Quiz',
                      onPressed: () => Navigator.pushNamed(
                        context,
                        '/create-quiz',
                        arguments: widget.moduleId,
                      ),
                      icon: Icons.add,
                    ),
                  ],
                ),
              const SizedBox(height: Dimensions.md),
              Expanded(
                child: quizProvider.quizzes.isEmpty
                    ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            const Text(
                              'No quizzes available',
                              style: TextStyles.bodyLarge,
                            ),
                            if (!isTeacher) ...[
                              const SizedBox(height: Dimensions.md),
                              const Text(
                                'Quizzes will appear here once your instructor creates them',
                                style: TextStyles.bodyMedium,
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ],
                        ),
                      )
                    : ListView.builder(
                        itemCount: quizProvider.quizzes.length,
                        itemBuilder: (context, index) {
                          final quiz = quizProvider.quizzes[index];
                          return Card(
                            margin:
                                const EdgeInsets.only(bottom: Dimensions.sm),
                            child: ListTile(
                              leading: const Icon(
                                Icons.quiz,
                                color: AppColors.primary,
                              ),
                              title: Text(quiz.title),
                              subtitle: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    quiz.description,
                                    style: TextStyles.caption,
                                    maxLines: 2,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  Text(
                                    'Duration: ${quiz.quizDuration} minutes',
                                    style: TextStyles.caption,
                                  ),
                                ],
                              ),
                              trailing: CustomButton(
                                text: isTeacher ? 'View' : 'Take Quiz',
                                onPressed: () => Navigator.pushNamed(
                                  context,
                                  isTeacher ? '/quiz-details' : '/take-quiz',
                                  arguments: {
                                    'quizId': quiz.id,
                                    'moduleId': widget.moduleId,
                                  },
                                ),
                              ),
                            ),
                          );
                        },
                      ),
              ),
            ],
          ),
        );
      },
    );
  }
}

lib/widgets/module/results_section.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../constants/colors.dart';
import '../../constants/dimensions.dart';
import '../../constants/text_styles.dart';
import '../../providers/auth_provider.dart';
import '../../providers/result_provider.dart';
import '../../data/models/result.dart';
import '../common/loading_overlay.dart';
import '../common/custom_button.dart';
import 'package:flutter_markdown/flutter_markdown.dart';

class ResultSection extends StatefulWidget {
  final int moduleId;
  final int quizId;

  const ResultSection({
    super.key,
    required this.moduleId,
    required this.quizId,
  });

  @override
  State<ResultSection> createState() => _ResultSectionState();
}

class _ResultSectionState extends State<ResultSection> {
  @override
  void initState() {
    super.initState();
    _loadResults();
  }

  Future<void> _loadResults() async {
    if (!mounted) return;
    final resultProvider = Provider.of<ResultProvider>(context, listen: false);
    await resultProvider.fetchResults(widget.moduleId, widget.quizId);

    if (!mounted) return;
    final isTeacher =
        Provider.of<AuthProvider>(context, listen: false).user?.role ==
            'teacher';
    if (isTeacher) {
      await resultProvider.fetchLeaderboard(widget.moduleId, widget.quizId);
    }
  }

  @override
  Widget build(BuildContext context) {
    final isTeacher =
        Provider.of<AuthProvider>(context).user?.role == 'teacher';

    return Consumer<ResultProvider>(
      builder: (context, resultProvider, child) {
        if (resultProvider.isLoading) {
          return const LoadingOverlay(
            isLoading: true,
            child: SizedBox.expand(),
          );
        }

        if (resultProvider.error != null) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'Error loading results',
                  style: TextStyles.h3.copyWith(color: AppColors.error),
                ),
                const SizedBox(height: Dimensions.sm),
                Text(
                  resultProvider.error!,
                  style: TextStyles.bodyMedium,
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: Dimensions.md),
                CustomButton(
                  text: 'Retry',
                  onPressed: _loadResults,
                ),
              ],
            ),
          );
        }

        if (isTeacher && resultProvider.leaderboard != null) {
          return _buildLeaderboard(resultProvider.leaderboard!);
        }

        return _buildStudentResults(resultProvider.results);
      },
    );
  }

  Widget _buildLeaderboard(Map<String, dynamic> leaderboard) {
    return Padding(
      padding: const EdgeInsets.all(Dimensions.md),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Quiz Results: ${leaderboard['quiz_title']}',
            style: TextStyles.h2,
          ),
          const SizedBox(height: Dimensions.md),
          _buildStatisticsCard(leaderboard),
          const SizedBox(height: Dimensions.md),
          Expanded(
            child: ListView.builder(
              itemCount: leaderboard['submissions'].length,
              itemBuilder: (context, index) {
                final submission = leaderboard['submissions'][index];
                return Card(
                  margin: const EdgeInsets.only(bottom: Dimensions.sm),
                  child: ListTile(
                    leading: CircleAvatar(
                      backgroundColor: AppColors.primary,
                      child: Text(
                        '${index + 1}',
                        style: TextStyles.bodyMedium.copyWith(
                          color: AppColors.white,
                        ),
                      ),
                    ),
                    title: Text(
                      submission['student_name'],
                      style: TextStyles.bodyLarge,
                    ),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Score: ${submission['percentage']}%',
                          style: TextStyles.bodySmall.copyWith(
                            color: _getScoreColor(submission['percentage']),
                          ),
                        ),
                        Text(
                          'Submitted: ${_formatDate(DateTime.parse(submission['submitted_at']))}',
                          style: TextStyles.bodySmall,
                        ),
                      ],
                    ),
                    trailing: IconButton(
                      icon: const Icon(Icons.info_outline),
                      color: AppColors.primary,
                      onPressed: () => _showRecommendations(
                        submission['student_name'],
                        submission['ai_recommendations'] ??
                            'No recommendations available',
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatisticsCard(Map<String, dynamic> leaderboard) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(Dimensions.md),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildStatItem(
              'Total Students',
              leaderboard['total_students'].toString(),
              Icons.people,
            ),
            _buildStatItem(
              'Submitted',
              leaderboard['submitted_count'].toString(),
              Icons.check_circle,
            ),
            _buildStatItem(
              'Pending',
              leaderboard['pending_count'].toString(),
              Icons.pending,
            ),
            _buildStatItem(
              'Average',
              '${leaderboard['average_score'].toStringAsFixed(1)}%',
              Icons.analytics,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, color: AppColors.primary, size: Dimensions.iconMd),
        const SizedBox(height: Dimensions.xs),
        Text(
          value,
          style: TextStyles.h3.copyWith(color: AppColors.primary),
        ),
        Text(
          label,
          style: TextStyles.caption,
        ),
      ],
    );
  }

  Widget _buildStudentResults(List<Result> results) {
    if (results.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.quiz,
              size: Dimensions.iconLg,
              color: AppColors.grey,
            ),
            const SizedBox(height: Dimensions.md),
            Text(
              'No results available',
              style: TextStyles.h3,
            ),
            const SizedBox(height: Dimensions.sm),
            Text(
              'Complete a quiz to see your results here',
              style: TextStyles.bodyMedium,
              textAlign: TextAlign.center,
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      itemCount: results.length,
      padding: const EdgeInsets.all(Dimensions.md),
      itemBuilder: (context, index) {
        final result = results[index];
        return Card(
          margin: const EdgeInsets.only(bottom: Dimensions.sm),
          child: ListTile(
            leading: Icon(
              Icons.assignment,
              color: _getScoreColor(result.percentage),
              size: Dimensions.iconMd,
            ),
            title: Text(
              'Score: ${result.percentage}%',
              style: TextStyles.bodyLarge.copyWith(
                color: _getScoreColor(result.percentage),
              ),
            ),
            subtitle: Text(
              'Submitted: ${_formatDate(result.dateTaken)}',
              style: TextStyles.bodySmall,
            ),
            trailing: CustomButton(
              text: 'View Feedback',
              onPressed: () => _showRecommendations(
                'Your Results',
                result.aiRecommendations ?? 'No recommendations available',
              ),
            ),
          ),
        );
      },
    );
  }

  void _showRecommendations(String title, String recommendations) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        child: Container(
          constraints: const BoxConstraints(
            maxWidth: 600,
            maxHeight: 800,
          ),
          padding: const EdgeInsets.all(Dimensions.md),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      title,
                      style: TextStyles.h3,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.pop(context),
                    color: AppColors.grey,
                  ),
                ],
              ),
              const Divider(),
              const SizedBox(height: Dimensions.sm),
              Expanded(
                child: SingleChildScrollView(
                  child: MarkdownBody(
                    data: recommendations,
                    styleSheet: MarkdownStyleSheet(
                      p: TextStyles.bodyMedium,
                      h1: TextStyles.h1,
                      h2: TextStyles.h2,
                      h3: TextStyles.h3,
                      listBullet: TextStyles.bodyMedium,
                      blockquote: TextStyles.bodyMedium.copyWith(
                        color: AppColors.textSecondary,
                        fontStyle: FontStyle.italic,
                      ),
                      code: TextStyles.bodyMedium.copyWith(
                        fontFamily: 'monospace',
                        backgroundColor: AppColors.lightGrey,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Color _getScoreColor(double percentage) {
    if (percentage >= 80) {
      return AppColors.success;
    } else if (percentage >= 60) {
      return AppColors.warning;
    } else {
      return AppColors.error;
    }
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }
}

lib/widgets/notes/note_card.dart
import 'package:flutter/material.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import '../../../data/models/note.dart';
import 'package:intl/intl.dart'; // Add this package to pubspec.yaml

class NoteCard extends StatelessWidget {
  final Note note;
  final VoidCallback onTap;

  const NoteCard({
    Key? key,
    required this.note,
    required this.onTap,
  }) : super(key: key);

  // Move the date formatting logic to the widget
  String _formatDate(DateTime date) {
    return DateFormat('dd/MM/yyyy').format(date);
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
        child: Padding(
          padding: const EdgeInsets.all(Dimensions.md),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                note.title,
                style: TextStyles.h3,
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: Dimensions.sm),
              Text(
                note.content,
                style: TextStyles.bodyMedium.copyWith(
                  color: AppColors.grey,
                ),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: Dimensions.md),
              Text(
                'Last updated: ${_formatDate(note.updatedAt)}', // Use the formatting method
                style: TextStyles.caption.copyWith(
                  color: AppColors.grey,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

lib/widgets/quiz/question_card.dart
import 'package:flutter/material.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import 'package:app/ui/controllers/quiz_controller.dart';

class QuestionCard extends StatelessWidget {
  final question;
  final String? selectedAnswer;
  final Function(String) onAnswerSelected;
  final QuizController _quizController = QuizController();

  QuestionCard({
    Key? key,
    required this.question,
    required this.selectedAnswer,
    required this.onAnswerSelected,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Use controller to get shuffled options
    final shuffledOptions = _quizController.shuffleOptions(question.options);

    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
      ),
      child: Padding(
        padding: const EdgeInsets.all(Dimensions.md),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              question.text,
              style: TextStyles.h3,
            ),
            const SizedBox(height: Dimensions.md),
            ...shuffledOptions.map((option) => RadioListTile<String>(
                  title: Text(option),
                  value: option,
                  groupValue: selectedAnswer,
                  onChanged: (value) => onAnswerSelected(value!),
                  activeColor: AppColors.primary,
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: Dimensions.sm,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius:
                        BorderRadius.circular(Dimensions.borderRadiusSm),
                  ),
                  tileColor: selectedAnswer == option
                      ? AppColors.primary.withOpacity(0.1)
                      : null,
                )),
          ],
        ),
      ),
    );
  }
}

lib/widgets/quiz/result_card.dart
import 'package:flutter/material.dart';
import '../../../constants/colors.dart';
import '../../../constants/dimensions.dart';
import '../../../constants/text_styles.dart';
import 'package:app/ui/controllers/quiz_controller.dart';

class ResultCard extends StatelessWidget {
  final ParsedQuestion question;
  final String userAnswer;
  final bool isCorrect;

  const ResultCard({
    Key? key,
    required this.question,
    required this.userAnswer,
    required this.isCorrect,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(Dimensions.borderRadiusMd),
      ),
      child: Padding(
        padding: const EdgeInsets.all(Dimensions.md),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  isCorrect ? Icons.check_circle : Icons.cancel,
                  color: isCorrect ? AppColors.success : AppColors.error,
                ),
                const SizedBox(width: Dimensions.sm),
                Expanded(
                  child: Text(
                    question.text,
                    style: TextStyles.h3,
                  ),
                ),
              ],
            ),
            const SizedBox(height: Dimensions.md),
            Text(
              'Your answer: $userAnswer',
              style: TextStyles.bodyMedium.copyWith(
                color: isCorrect ? AppColors.success : AppColors.error,
              ),
            ),
            if (!isCorrect) ...[
              const SizedBox(height: Dimensions.sm),
              Text(
                'Correct answer: ${question.correctAnswer}',
                style: TextStyles.bodyMedium.copyWith(
                  color: AppColors.success,
                ),
              ),
            ],
            const SizedBox(height: Dimensions.sm),
            Text(
              'Options:',
              style: TextStyles.bodyMedium.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            ...question.options.map((option) => Padding(
                  padding: const EdgeInsets.only(
                    left: Dimensions.md,
                    top: Dimensions.xs,
                  ),
                  child: Text(
                    '• $option',
                    style: TextStyles.bodyMedium.copyWith(
                      color: option == question.correctAnswer
                          ? AppColors.success
                          : option == userAnswer && !isCorrect
                              ? AppColors.error
                              : AppColors.textPrimary,
                    ),
                  ),
                )),
          ],
        ),
      ),
    );
  }
}

lib/widgets/quiz/result_view.dart
import 'package:flutter/material.dart';
import 'package:app/constants/colors.dart';
import 'package:app/constants/dimensions.dart';
import 'package:app/constants/text_styles.dart';
import 'package:app/widgets/common/custom_button.dart';

class ResultView extends StatelessWidget {
  final int correctAnswers;
  final int totalQuestions;
  final VoidCallback onReviewAnswers;
  final VoidCallback onReturn;

  const ResultView({
    Key? key,
    required this.correctAnswers,
    required this.totalQuestions,
    required this.onReviewAnswers,
    required this.onReturn,
  }) : super(key: key);

  String _getPerformanceMessage(double percentage) {
    if (percentage >= 90) return 'Excellent!';
    if (percentage >= 80) return 'Great Job!';
    if (percentage >= 70) return 'Good Work!';
    if (percentage >= 60) return 'Keep Practicing!';
    return 'Try Again!';
  }

  Color _getPerformanceColor(double percentage) {
    if (percentage >= 90) return AppColors.success;
    if (percentage >= 70) return AppColors.primary;
    if (percentage >= 60) return AppColors.warning;
    return AppColors.error;
  }

  @override
  Widget build(BuildContext context) {
    final percentage = (correctAnswers / totalQuestions) * 100;
    final performanceColor = _getPerformanceColor(percentage);

    return Container(
      padding: const EdgeInsets.all(Dimensions.lg),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Performance Icon
          Icon(
            percentage >= 60 ? Icons.emoji_events : Icons.psychology,
            size: 64,
            color: performanceColor,
          ),
          const SizedBox(height: Dimensions.md),

          // Quiz Complete Text
          Text(
            _getPerformanceMessage(percentage),
            style: TextStyles.h1.copyWith(
              color: performanceColor,
            ),
          ),
          const SizedBox(height: Dimensions.lg),

          // Score Container
          Container(
            padding: const EdgeInsets.all(Dimensions.lg),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  performanceColor.withOpacity(0.1),
                  performanceColor.withOpacity(0.05),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(Dimensions.borderRadiusLg),
              border: Border.all(
                color: performanceColor.withOpacity(0.2),
                width: 1,
              ),
            ),
            child: Column(
              children: [
                // Percentage
                Text(
                  '${percentage.round()}%',
                  style: TextStyles.h1.copyWith(
                    color: performanceColor,
                    fontSize: 48,
                  ),
                ),
                const SizedBox(height: Dimensions.sm),

                // Score Details
                Text(
                  '$correctAnswers out of $totalQuestions correct',
                  style: TextStyles.bodyLarge.copyWith(
                    color: AppColors.textSecondary,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: Dimensions.xl),

          // Action Buttons
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Expanded(
                child: CustomButton(
                  text: 'Review Answers',
                  onPressed: onReviewAnswers,
                  isOutlined: true,
                  icon: Icons.refresh,
                ),
              ),
              const SizedBox(width: Dimensions.md),
              Expanded(
                child: CustomButton(
                  text: 'Return',
                  onPressed: onReturn,
                  icon: Icons.check_circle_outline,
                  gradient: LinearGradient(
                    colors: [
                      performanceColor,
                      performanceColor.withOpacity(0.8),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

lib/widgets/widgets.dart
export 'common/app_bar.dart';
export 'common/bottom_navigation.dart';
export 'common/custom_button.dart';
export 'quiz/result_view.dart';
export 'module/module_card.dart';
export 'common/gradient_background.dart';
export 'common/loading_overlay.dart';
export 'common/custom_text_field.dart';
export 'home/welcome_banner.dart';
export 'home/stats_card.dart';
export 'home/course_card.dart';
export 'course/course_info_section.dart';
export 'module/module_list_section.dart';
export 'notes/note_card.dart';
export 'quiz/question_card.dart';
export 'quiz/result_card.dart';

lib/main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'constants/theme.dart';
import 'services/routes.dart';

// Providers
import 'providers/auth_provider.dart';
import 'providers/course_provider.dart';
import 'providers/enrollment_provider.dart';
import 'providers/module_provider.dart';
import 'providers/note_provider.dart';
import 'providers/quiz_provider.dart';
import 'providers/result_provider.dart';

// Repositories
import 'data/repositories/auth_repository.dart';
import 'data/repositories/course_repository.dart';
import 'data/repositories/enrollment_repository.dart';
import 'data/repositories/module_repository.dart';
import 'data/repositories/note_repository.dart';
import 'data/repositories/quiz_repository.dart';
import 'data/repositories/result_repository.dart';

// Services
import 'services/auth_api_service.dart';
import 'services/course_api_service.dart';
import 'services/enrollment_api_service.dart';
import 'services/module_api_service.dart';
import 'services/note_api_service.dart';
import 'services/quiz_api_service.dart';
import 'services/result_api_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize API services
  final authService = AuthApiService();
  final courseService = CourseApiService();
  final enrollmentService = EnrollmentApiService();
  final moduleService = ModuleApiService();
  final noteService = NoteApiService();
  final quizService = QuizApiService();
  final resultService = ResultApiService();

  // Initialize repositories
  final authRepository = AuthRepository(authService);
  final courseRepository = CourseRepository(courseService);
  final enrollmentRepository = EnrollmentRepository(enrollmentService);
  final moduleRepository = ModuleRepository(moduleService);
  final noteRepository = NoteRepository(noteService);
  final quizRepository = QuizRepository(quizService);
  final resultRepository = ResultRepository(resultService);

  runApp(MyApp(
    authRepository: authRepository,
    courseRepository: courseRepository,
    enrollmentRepository: enrollmentRepository,
    moduleRepository: moduleRepository,
    noteRepository: noteRepository,
    quizRepository: quizRepository,
    resultRepository: resultRepository,
    moduleService: moduleService,
  ));
}

class MyApp extends StatelessWidget {
  final AuthRepository authRepository;
  final CourseRepository courseRepository;
  final EnrollmentRepository enrollmentRepository;
  final ModuleRepository moduleRepository;
  final NoteRepository noteRepository;
  final QuizRepository quizRepository;
  final ResultRepository resultRepository;
  final ModuleApiService moduleService;

  const MyApp({
    Key? key,
    required this.authRepository,
    required this.courseRepository,
    required this.enrollmentRepository,
    required this.moduleRepository,
    required this.noteRepository,
    required this.quizRepository,
    required this.resultRepository,
    required this.moduleService,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // Auth Provider
        ChangeNotifierProvider(
          create: (_) => AuthProvider(authRepository),
        ),

        // Course Provider
        ChangeNotifierProvider(
          create: (_) => CourseProvider(courseRepository),
        ),

        // Enrollment Provider
        ChangeNotifierProvider(
          create: (_) => EnrollmentProvider(enrollmentRepository),
        ),

        // Module Provider
        ChangeNotifierProvider(
          create: (_) => ModuleProvider(moduleService),
        ),

        // Note Provider
        ChangeNotifierProvider(
          create: (_) => NoteProvider(noteRepository),
        ),

        // Quiz Provider
        ChangeNotifierProvider(
          create: (_) =>
              QuizProvider(quizRepository), // Updated to use repository
        ),

        // Result Provider
        ChangeNotifierProvider(
          create: (_) => ResultProvider(resultRepository),
        ),
      ],
      child: Consumer<AuthProvider>(
        builder: (context, authProvider, child) {
          return MaterialApp(
            title: 'LearnSmart',
            theme: AppTheme.lightTheme,
            darkTheme: AppTheme.darkTheme,
            themeMode: ThemeMode.system,
            debugShowCheckedModeBanner: false,
            initialRoute: authProvider.isAuthenticated
                ? AppRoutes.home
                : AppRoutes.welcome,
            onGenerateRoute: AppRoutes.generateRoute,
          );
        },
      ),
    );
  }
}

